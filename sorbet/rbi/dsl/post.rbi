# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Post`.
# Please instead update this file by running `bin/tapioca dsl Post`.


class Post
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  sig { returns(ActiveStorage::Attached::Many) }
  def images; end

  sig { params(attachable: T.untyped).returns(T.untyped) }
  def images=(attachable); end

  sig { returns(Enumerize::Value) }
  def type; end

  sig { returns(Enumerize::Value) }
  def visibility; end

  private

  sig { returns(NilClass) }
  def to_ary; end

  class << self
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Post).void)).returns(::Post) }
    def new(attributes = nil, &block); end

    sig { returns(Enumerize::Attribute) }
    def type; end

    sig { returns(Enumerize::Attribute) }
    def visibility; end
  end

  module CommonRelationMethods
    sig { params(block: T.nilable(T.proc.params(record: ::Post).returns(T.untyped))).returns(T::Boolean) }
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.any(Integer, Float, BigDecimal)) }
    def average(column_name); end

    sig { params(block: T.nilable(T.proc.params(object: ::Post).void)).returns(::Post) }
    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Post).void)
      ).returns(T::Array[::Post])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Post).void)).returns(::Post) }
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.any(Integer, Float, BigDecimal)) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.nilable(T.any(String, Symbol))).returns(Integer) }
    sig { params(column_name: NilClass, block: T.proc.params(object: ::Post).void).returns(Integer) }
    def count(column_name = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(object: ::Post).void)).returns(::Post) }
    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Post).void)
      ).returns(T::Array[::Post])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Post).void)).returns(::Post) }
    def create(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(object: ::Post).void)).returns(::Post) }
    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Post).void)
      ).returns(T::Array[::Post])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Post).void)).returns(::Post) }
    def create!(attributes = nil, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Post).void)
      ).returns(T::Array[::Post])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Post).void)).returns(::Post) }
    def create_or_find_by(attributes, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Post).void)
      ).returns(T::Array[::Post])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Post).void)).returns(::Post) }
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::Post]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::Post)) }
    def fifth; end

    sig { returns(::Post) }
    def fifth!; end

    sig do
      params(
        args: T.any(String, Symbol, ::ActiveSupport::Multibyte::Chars, T::Boolean, BigDecimal, Numeric, ::ActiveRecord::Type::Binary::Data, ::ActiveRecord::Type::Time::Value, Date, Time, ::ActiveSupport::Duration, T::Class[T.anything])
      ).returns(::Post)
    end
    sig do
      params(
        args: T::Array[T.any(String, Symbol, ::ActiveSupport::Multibyte::Chars, T::Boolean, BigDecimal, Numeric, ::ActiveRecord::Type::Binary::Data, ::ActiveRecord::Type::Time::Value, Date, Time, ::ActiveSupport::Duration, T::Class[T.anything])]
      ).returns(T::Enumerable[::Post])
    end
    sig { params(args: NilClass, block: T.proc.params(object: ::Post).void).returns(T.nilable(::Post)) }
    def find(args = nil, &block); end

    sig { params(args: T.untyped).returns(T.nilable(::Post)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::Post) }
    def find_by!(*args); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.proc.params(object: ::Post).void
      ).void
    end
    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol
      ).returns(T::Enumerator[::Post])
    end
    def find_each(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.proc.params(object: T::Array[::Post]).void
      ).void
    end
    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol
      ).returns(T::Enumerator[T::Enumerator[::Post]])
    end
    def find_in_batches(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Post).void)
      ).returns(T::Array[::Post])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Post).void)).returns(::Post) }
    def find_or_create_by(attributes, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Post).void)
      ).returns(T::Array[::Post])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Post).void)).returns(::Post) }
    def find_or_create_by!(attributes, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Post).void)
      ).returns(T::Array[::Post])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Post).void)).returns(::Post) }
    def find_or_initialize_by(attributes, &block); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(T.nilable(::Post)) }
    def find_signed(signed_id, purpose: nil); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(::Post) }
    def find_signed!(signed_id, purpose: nil); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::Post) }
    def find_sole_by(arg, *args); end

    sig { returns(T.nilable(::Post)) }
    sig { params(limit: Integer).returns(T::Array[::Post]) }
    def first(limit = nil); end

    sig { returns(::Post) }
    def first!; end

    sig { returns(T.nilable(::Post)) }
    def forty_two; end

    sig { returns(::Post) }
    def forty_two!; end

    sig { returns(T.nilable(::Post)) }
    def fourth; end

    sig { returns(::Post) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        use_ranges: T.untyped,
        block: T.proc.params(object: PrivateRelation).void
      ).void
    end
    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        use_ranges: T.untyped
      ).returns(::ActiveRecord::Batches::BatchEnumerator)
    end
    def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, order: :asc, use_ranges: nil, &block); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { returns(T.nilable(::Post)) }
    sig { params(limit: Integer).returns(T::Array[::Post]) }
    def last(limit = nil); end

    sig { returns(::Post) }
    def last!; end

    sig { params(block: T.nilable(T.proc.params(record: ::Post).returns(T.untyped))).returns(T::Boolean) }
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig { params(block: T.nilable(T.proc.params(object: ::Post).void)).returns(::Post) }
    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Post).void)
      ).returns(T::Array[::Post])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Post).void)).returns(::Post) }
    def new(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(record: ::Post).returns(T.untyped))).returns(T::Boolean) }
    def none?(&block); end

    sig { params(block: T.nilable(T.proc.params(record: ::Post).returns(T.untyped))).returns(T::Boolean) }
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::Post)) }
    def second; end

    sig { returns(::Post) }
    def second!; end

    sig { returns(T.nilable(::Post)) }
    def second_to_last; end

    sig { returns(::Post) }
    def second_to_last!; end

    sig { returns(::Post) }
    def sole; end

    sig { params(initial_value_or_column: T.untyped).returns(T.any(Integer, Float, BigDecimal)) }
    sig do
      type_parameters(:U)
        .params(
          initial_value_or_column: T.nilable(T.type_parameter(:U)),
          block: T.proc.params(object: ::Post).returns(T.type_parameter(:U))
        ).returns(T.type_parameter(:U))
    end
    def sum(initial_value_or_column = nil, &block); end

    sig { returns(T.nilable(::Post)) }
    sig { params(limit: Integer).returns(T::Array[::Post]) }
    def take(limit = nil); end

    sig { returns(::Post) }
    def take!; end

    sig { returns(T.nilable(::Post)) }
    def third; end

    sig { returns(::Post) }
    def third!; end

    sig { returns(T.nilable(::Post)) }
    def third_to_last; end

    sig { returns(::Post) }
    def third_to_last!; end
  end

  module GeneratedAssociationMethods
    sig { returns(T.nilable(::User)) }
    def author; end

    sig { params(value: T.nilable(::User)).void }
    def author=(value); end

    sig { returns(T::Boolean) }
    def author_changed?; end

    sig { returns(T::Array[T.untyped]) }
    def author_friend_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def author_friend_ids=(ids); end

    # This method is created by ActiveRecord on the `Post` class because it declared `has_many :author_friends, through: :author`.
    # 🔗 [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::Friend::PrivateCollectionProxy) }
    def author_friends; end

    sig { params(value: T::Enumerable[::Friend]).void }
    def author_friends=(value); end

    sig { returns(T::Boolean) }
    def author_previously_changed?; end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def build_author(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Encouragement) }
    def build_encouragement(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Post) }
    def build_quoted_post(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_author(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_author!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Encouragement) }
    def create_encouragement(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Encouragement) }
    def create_encouragement!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Post) }
    def create_quoted_post(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Post) }
    def create_quoted_post!(*args, &blk); end

    sig { returns(T.nilable(::Encouragement)) }
    def encouragement; end

    sig { params(value: T.nilable(::Encouragement)).void }
    def encouragement=(value); end

    sig { returns(T::Boolean) }
    def encouragement_changed?; end

    sig { returns(T::Boolean) }
    def encouragement_previously_changed?; end

    sig { returns(T::Array[T.untyped]) }
    def images_attachment_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def images_attachment_ids=(ids); end

    # This method is created by ActiveRecord on the `Post` class because it declared `has_many :images_attachments`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::ActiveStorage::Attachment::PrivateCollectionProxy) }
    def images_attachments; end

    sig { params(value: T::Enumerable[::ActiveStorage::Attachment]).void }
    def images_attachments=(value); end

    sig { returns(T::Array[T.untyped]) }
    def images_blob_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def images_blob_ids=(ids); end

    # This method is created by ActiveRecord on the `Post` class because it declared `has_many :images_blobs, through: :images_attachments`.
    # 🔗 [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::ActiveStorage::Blob::PrivateCollectionProxy) }
    def images_blobs; end

    sig { params(value: T::Enumerable[::ActiveStorage::Blob]).void }
    def images_blobs=(value); end

    sig { returns(T::Array[T.untyped]) }
    def notification_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def notification_ids=(ids); end

    # This method is created by ActiveRecord on the `Post` class because it declared `has_many :notifications`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Notification::PrivateCollectionProxy) }
    def notifications; end

    sig { params(value: T::Enumerable[::Notification]).void }
    def notifications=(value); end

    sig { returns(T.nilable(::Post)) }
    def quoted_post; end

    sig { params(value: T.nilable(::Post)).void }
    def quoted_post=(value); end

    sig { returns(T::Boolean) }
    def quoted_post_changed?; end

    sig { returns(T::Boolean) }
    def quoted_post_previously_changed?; end

    sig { returns(T::Array[T.untyped]) }
    def reaction_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def reaction_ids=(ids); end

    # This method is created by ActiveRecord on the `Post` class because it declared `has_many :reactions`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::PostReaction::PrivateCollectionProxy) }
    def reactions; end

    sig { params(value: T::Enumerable[::PostReaction]).void }
    def reactions=(value); end

    sig { returns(T.nilable(::User)) }
    def reload_author; end

    sig { returns(T.nilable(::Encouragement)) }
    def reload_encouragement; end

    sig { returns(T.nilable(::Post)) }
    def reload_quoted_post; end

    sig { returns(T::Array[T.untyped]) }
    def reply_receipt_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def reply_receipt_ids=(ids); end

    # This method is created by ActiveRecord on the `Post` class because it declared `has_many :reply_receipts`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::PostReplyReceipt::PrivateCollectionProxy) }
    def reply_receipts; end

    sig { params(value: T::Enumerable[::PostReplyReceipt]).void }
    def reply_receipts=(value); end

    sig { void }
    def reset_author; end

    sig { void }
    def reset_encouragement; end

    sig { void }
    def reset_quoted_post; end

    sig { returns(T::Array[T.untyped]) }
    def share_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def share_ids=(ids); end

    # This method is created by ActiveRecord on the `Post` class because it declared `has_many :shares`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::PostShare::PrivateCollectionProxy) }
    def shares; end

    sig { params(value: T::Enumerable[::PostShare]).void }
    def shares=(value); end

    sig { returns(T::Array[T.untyped]) }
    def sticker_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def sticker_ids=(ids); end

    # This method is created by ActiveRecord on the `Post` class because it declared `has_many :stickers`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::PostSticker::PrivateCollectionProxy) }
    def stickers; end

    sig { params(value: T::Enumerable[::PostSticker]).void }
    def stickers=(value); end

    sig { returns(T::Array[T.untyped]) }
    def view_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def view_ids=(ids); end

    # This method is created by ActiveRecord on the `Post` class because it declared `has_many :views`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::PostView::PrivateCollectionProxy) }
    def views; end

    sig { params(value: T::Enumerable[::PostView]).void }
    def views=(value); end
  end

  module GeneratedAssociationRelationMethods
    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def arel_columns(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def chronological(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def currently_pinned(*args, &blk); end

    sig { params(value: T::Boolean).returns(PrivateAssociationRelation) }
    def distinct(value = true); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(association: Symbol).returns(T::Array[T.untyped]) }
    def extract_associated(association); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationGroupChain) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_hidden_from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_chronological(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, kwargs: T.untyped).returns(PrivateAssociationRelation) }
    def search(*args, **kwargs); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    sig { params(blk: T.proc.params(record: ::Post).returns(BasicObject)).returns(T::Array[::Post]) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def user_created(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def visible_to_chosen_family(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def visible_to_friends(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def visible_to_public(*args, &blk); end

    sig { returns(PrivateAssociationRelationWhereChain) }
    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def where(*args); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_attached_images(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_encouragement(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_images(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_quoted_post_and_images(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_reactions(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end
  end

  module GeneratedAttributeMethods
    sig { returns(::String) }
    def author_id; end

    sig { params(value: ::String).returns(::String) }
    def author_id=(value); end

    sig { returns(T::Boolean) }
    def author_id?; end

    sig { returns(T.nilable(::String)) }
    def author_id_before_last_save; end

    sig { returns(T.untyped) }
    def author_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def author_id_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def author_id_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def author_id_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def author_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def author_id_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def author_id_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def author_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def author_id_previously_was; end

    sig { returns(T.nilable(::String)) }
    def author_id_was; end

    sig { void }
    def author_id_will_change!; end

    sig { returns(::String) }
    def body_html; end

    sig { params(value: ::String).returns(::String) }
    def body_html=(value); end

    sig { returns(T::Boolean) }
    def body_html?; end

    sig { returns(T.nilable(::String)) }
    def body_html_before_last_save; end

    sig { returns(T.untyped) }
    def body_html_before_type_cast; end

    sig { returns(T::Boolean) }
    def body_html_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def body_html_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def body_html_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def body_html_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def body_html_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def body_html_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def body_html_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def body_html_previously_was; end

    sig { returns(T.nilable(::String)) }
    def body_html_was; end

    sig { void }
    def body_html_will_change!; end

    sig { returns(::ActiveSupport::TimeWithZone) }
    def created_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def created_at_change; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def created_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def created_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def created_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def created_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(T.nilable(::String)) }
    def emoji; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def emoji=(value); end

    sig { returns(T::Boolean) }
    def emoji?; end

    sig { returns(T.nilable(::String)) }
    def emoji_before_last_save; end

    sig { returns(T.untyped) }
    def emoji_before_type_cast; end

    sig { returns(T::Boolean) }
    def emoji_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def emoji_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def emoji_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def emoji_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def emoji_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def emoji_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def emoji_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def emoji_previously_was; end

    sig { returns(T.nilable(::String)) }
    def emoji_was; end

    sig { void }
    def emoji_will_change!; end

    sig { returns(T.nilable(::String)) }
    def encouragement_id; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def encouragement_id=(value); end

    sig { returns(T::Boolean) }
    def encouragement_id?; end

    sig { returns(T.nilable(::String)) }
    def encouragement_id_before_last_save; end

    sig { returns(T.untyped) }
    def encouragement_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def encouragement_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def encouragement_id_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def encouragement_id_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def encouragement_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def encouragement_id_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def encouragement_id_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def encouragement_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def encouragement_id_previously_was; end

    sig { returns(T.nilable(::String)) }
    def encouragement_id_was; end

    sig { void }
    def encouragement_id_will_change!; end

    sig { returns(T::Array[::String]) }
    def hidden_from_ids; end

    sig { params(value: T::Array[::String]).returns(T::Array[::String]) }
    def hidden_from_ids=(value); end

    sig { returns(T::Boolean) }
    def hidden_from_ids?; end

    sig { returns(T.nilable(T::Array[::String])) }
    def hidden_from_ids_before_last_save; end

    sig { returns(T.untyped) }
    def hidden_from_ids_before_type_cast; end

    sig { returns(T::Boolean) }
    def hidden_from_ids_came_from_user?; end

    sig { returns(T.nilable([T::Array[::String], T::Array[::String]])) }
    def hidden_from_ids_change; end

    sig { returns(T.nilable([T::Array[::String], T::Array[::String]])) }
    def hidden_from_ids_change_to_be_saved; end

    sig { params(from: T::Array[::String], to: T::Array[::String]).returns(T::Boolean) }
    def hidden_from_ids_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Array[::String])) }
    def hidden_from_ids_in_database; end

    sig { returns(T.nilable([T::Array[::String], T::Array[::String]])) }
    def hidden_from_ids_previous_change; end

    sig { params(from: T::Array[::String], to: T::Array[::String]).returns(T::Boolean) }
    def hidden_from_ids_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Array[::String])) }
    def hidden_from_ids_previously_was; end

    sig { returns(T.nilable(T::Array[::String])) }
    def hidden_from_ids_was; end

    sig { void }
    def hidden_from_ids_will_change!; end

    sig { returns(::String) }
    def id; end

    sig { params(value: ::String).returns(::String) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::String)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def id_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def id_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def id_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def id_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def id_previously_was; end

    sig { returns(::String) }
    def id_value; end

    sig { params(value: ::String).returns(::String) }
    def id_value=(value); end

    sig { returns(T::Boolean) }
    def id_value?; end

    sig { returns(T.nilable(::String)) }
    def id_value_before_last_save; end

    sig { returns(T.untyped) }
    def id_value_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_value_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def id_value_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def id_value_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def id_value_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def id_value_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def id_value_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def id_value_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def id_value_previously_was; end

    sig { returns(T.nilable(::String)) }
    def id_value_was; end

    sig { void }
    def id_value_will_change!; end

    sig { returns(T.nilable(::String)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(T::Array[::String]) }
    def images_ids; end

    sig { params(value: T::Array[::String]).returns(T::Array[::String]) }
    def images_ids=(value); end

    sig { returns(T::Boolean) }
    def images_ids?; end

    sig { returns(T.nilable(T::Array[::String])) }
    def images_ids_before_last_save; end

    sig { returns(T.untyped) }
    def images_ids_before_type_cast; end

    sig { returns(T::Boolean) }
    def images_ids_came_from_user?; end

    sig { returns(T.nilable([T::Array[::String], T::Array[::String]])) }
    def images_ids_change; end

    sig { returns(T.nilable([T::Array[::String], T::Array[::String]])) }
    def images_ids_change_to_be_saved; end

    sig { params(from: T::Array[::String], to: T::Array[::String]).returns(T::Boolean) }
    def images_ids_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Array[::String])) }
    def images_ids_in_database; end

    sig { returns(T.nilable([T::Array[::String], T::Array[::String]])) }
    def images_ids_previous_change; end

    sig { params(from: T::Array[::String], to: T::Array[::String]).returns(T::Boolean) }
    def images_ids_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Array[::String])) }
    def images_ids_previously_was; end

    sig { returns(T.nilable(T::Array[::String])) }
    def images_ids_was; end

    sig { void }
    def images_ids_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def pinned_until; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def pinned_until=(value); end

    sig { returns(T::Boolean) }
    def pinned_until?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def pinned_until_before_last_save; end

    sig { returns(T.untyped) }
    def pinned_until_before_type_cast; end

    sig { returns(T::Boolean) }
    def pinned_until_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def pinned_until_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def pinned_until_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def pinned_until_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def pinned_until_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def pinned_until_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def pinned_until_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def pinned_until_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def pinned_until_was; end

    sig { void }
    def pinned_until_will_change!; end

    sig { returns(T.nilable(::String)) }
    def quoted_post_id; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def quoted_post_id=(value); end

    sig { returns(T::Boolean) }
    def quoted_post_id?; end

    sig { returns(T.nilable(::String)) }
    def quoted_post_id_before_last_save; end

    sig { returns(T.untyped) }
    def quoted_post_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def quoted_post_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def quoted_post_id_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def quoted_post_id_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def quoted_post_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def quoted_post_id_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def quoted_post_id_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def quoted_post_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def quoted_post_id_previously_was; end

    sig { returns(T.nilable(::String)) }
    def quoted_post_id_was; end

    sig { void }
    def quoted_post_id_will_change!; end

    sig { void }
    def restore_author_id!; end

    sig { void }
    def restore_body_html!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_emoji!; end

    sig { void }
    def restore_encouragement_id!; end

    sig { void }
    def restore_hidden_from_ids!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_id_value!; end

    sig { void }
    def restore_images_ids!; end

    sig { void }
    def restore_pinned_until!; end

    sig { void }
    def restore_quoted_post_id!; end

    sig { void }
    def restore_title!; end

    sig { void }
    def restore_type!; end

    sig { void }
    def restore_updated_at!; end

    sig { void }
    def restore_visibility!; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_author_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_author_id?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_body_html; end

    sig { returns(T::Boolean) }
    def saved_change_to_body_html?; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_emoji; end

    sig { returns(T::Boolean) }
    def saved_change_to_emoji?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_encouragement_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_encouragement_id?; end

    sig { returns(T.nilable([T::Array[::String], T::Array[::String]])) }
    def saved_change_to_hidden_from_ids; end

    sig { returns(T::Boolean) }
    def saved_change_to_hidden_from_ids?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_id_value; end

    sig { returns(T::Boolean) }
    def saved_change_to_id_value?; end

    sig { returns(T.nilable([T::Array[::String], T::Array[::String]])) }
    def saved_change_to_images_ids; end

    sig { returns(T::Boolean) }
    def saved_change_to_images_ids?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_pinned_until; end

    sig { returns(T::Boolean) }
    def saved_change_to_pinned_until?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_quoted_post_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_quoted_post_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_title; end

    sig { returns(T::Boolean) }
    def saved_change_to_title?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_type; end

    sig { returns(T::Boolean) }
    def saved_change_to_type?; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def saved_change_to_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_updated_at?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_visibility; end

    sig { returns(T::Boolean) }
    def saved_change_to_visibility?; end

    sig { returns(T.nilable(::String)) }
    def title; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def title=(value); end

    sig { returns(T::Boolean) }
    def title?; end

    sig { returns(T.nilable(::String)) }
    def title_before_last_save; end

    sig { returns(T.untyped) }
    def title_before_type_cast; end

    sig { returns(T::Boolean) }
    def title_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def title_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def title_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def title_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def title_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def title_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def title_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def title_previously_was; end

    sig { returns(T.nilable(::String)) }
    def title_was; end

    sig { void }
    def title_will_change!; end

    sig { returns(T.untyped) }
    def type; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def type=(value); end

    sig { returns(T::Boolean) }
    def type?; end

    sig { returns(T.untyped) }
    def type_before_last_save; end

    sig { returns(T.untyped) }
    def type_before_type_cast; end

    sig { returns(T::Boolean) }
    def type_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def type_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def type_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def type_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def type_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def type_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def type_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def type_previously_was; end

    sig { returns(T.untyped) }
    def type_was; end

    sig { void }
    def type_will_change!; end

    sig { returns(::ActiveSupport::TimeWithZone) }
    def updated_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def updated_at_change; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def updated_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def updated_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def updated_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def updated_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(T.untyped) }
    def visibility; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def visibility=(value); end

    sig { returns(T::Boolean) }
    def visibility?; end

    sig { returns(T.untyped) }
    def visibility_before_last_save; end

    sig { returns(T.untyped) }
    def visibility_before_type_cast; end

    sig { returns(T::Boolean) }
    def visibility_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def visibility_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def visibility_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def visibility_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def visibility_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def visibility_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def visibility_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def visibility_previously_was; end

    sig { returns(T.untyped) }
    def visibility_was; end

    sig { void }
    def visibility_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_author_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_body_html?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_emoji?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_encouragement_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_hidden_from_ids?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id_value?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_images_ids?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_pinned_until?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_quoted_post_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_title?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_type?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_updated_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_visibility?; end
  end

  module GeneratedRelationMethods
    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def arel_columns(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def chronological(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def currently_pinned(*args, &blk); end

    sig { params(value: T::Boolean).returns(PrivateRelation) }
    def distinct(value = true); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(association: Symbol).returns(T::Array[T.untyped]) }
    def extract_associated(association); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationGroupChain) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_hidden_from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_chronological(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, kwargs: T.untyped).returns(PrivateRelation) }
    def search(*args, **kwargs); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    sig { params(blk: T.proc.params(record: ::Post).returns(BasicObject)).returns(T::Array[::Post]) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def user_created(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def visible_to_chosen_family(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def visible_to_friends(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def visible_to_public(*args, &blk); end

    sig { returns(PrivateRelationWhereChain) }
    sig { params(args: T.untyped).returns(PrivateRelation) }
    def where(*args); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_attached_images(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_encouragement(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_images(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_quoted_post_and_images(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_reactions(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Post } }

    sig { returns(T::Array[::Post]) }
    def to_a; end

    sig { returns(T::Array[::Post]) }
    def to_ary; end
  end

  class PrivateAssociationRelationGroupChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::Post } }

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)]) }
    def average(column_name); end

    sig do
      params(
        operation: Symbol,
        column_name: T.any(String, Symbol)
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T::Hash[T.untyped, Integer]) }
    def count(column_name = nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(T.self_type) }
    def having(*args, &blk); end

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.untyped]) }
    def maximum(column_name); end

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.untyped]) }
    def minimum(column_name); end

    sig { returns(T::Hash[T.untyped, Integer]) }
    def size; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def sum(column_name = nil, &block); end
  end

  class PrivateAssociationRelationWhereChain
    Elem = type_member { { fixed: ::Post } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Post } }

    sig do
      params(
        records: T.any(::Post, T::Enumerable[T.any(::Post, T::Enumerable[::Post])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::Post, T::Enumerable[T.any(::Post, T::Enumerable[::Post])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::Post, T::Enumerable[T.any(::Post, T::Enumerable[::Post])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig { returns(T::Array[::Post]) }
    def load_target; end

    sig do
      params(
        records: T.any(::Post, T::Enumerable[T.any(::Post, T::Enumerable[::Post])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::Post, T::Enumerable[T.any(::Post, T::Enumerable[::Post])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::Post, T::Enumerable[T.any(::Post, T::Enumerable[::Post])])
      ).returns(T::Array[::Post])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::Post]) }
    def target; end

    sig { returns(T::Array[::Post]) }
    def to_a; end

    sig { returns(T::Array[::Post]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::Post } }

    sig { returns(T::Array[::Post]) }
    def to_a; end

    sig { returns(T::Array[::Post]) }
    def to_ary; end
  end

  class PrivateRelationGroupChain < PrivateRelation
    Elem = type_member { { fixed: ::Post } }

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)]) }
    def average(column_name); end

    sig do
      params(
        operation: Symbol,
        column_name: T.any(String, Symbol)
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T::Hash[T.untyped, Integer]) }
    def count(column_name = nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(T.self_type) }
    def having(*args, &blk); end

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.untyped]) }
    def maximum(column_name); end

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.untyped]) }
    def minimum(column_name); end

    sig { returns(T::Hash[T.untyped, Integer]) }
    def size; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def sum(column_name = nil, &block); end
  end

  class PrivateRelationWhereChain
    Elem = type_member { { fixed: ::Post } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end
