# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `PgQuery::Node`.
# Please instead update this file by running `bin/tapioca dsl PgQuery::Node`.


class PgQuery::Node < Google::Protobuf::AbstractMessage
  sig do
    params(
      a_array_expr: T.nilable(PgQuery::A_ArrayExpr),
      a_const: T.nilable(PgQuery::A_Const),
      a_expr: T.nilable(PgQuery::A_Expr),
      a_indices: T.nilable(PgQuery::A_Indices),
      a_indirection: T.nilable(PgQuery::A_Indirection),
      a_star: T.nilable(PgQuery::A_Star),
      access_priv: T.nilable(PgQuery::AccessPriv),
      aggref: T.nilable(PgQuery::Aggref),
      alias: T.nilable(PgQuery::Alias),
      alter_collation_stmt: T.nilable(PgQuery::AlterCollationStmt),
      alter_database_refresh_coll_stmt: T.nilable(PgQuery::AlterDatabaseRefreshCollStmt),
      alter_database_set_stmt: T.nilable(PgQuery::AlterDatabaseSetStmt),
      alter_database_stmt: T.nilable(PgQuery::AlterDatabaseStmt),
      alter_default_privileges_stmt: T.nilable(PgQuery::AlterDefaultPrivilegesStmt),
      alter_domain_stmt: T.nilable(PgQuery::AlterDomainStmt),
      alter_enum_stmt: T.nilable(PgQuery::AlterEnumStmt),
      alter_event_trig_stmt: T.nilable(PgQuery::AlterEventTrigStmt),
      alter_extension_contents_stmt: T.nilable(PgQuery::AlterExtensionContentsStmt),
      alter_extension_stmt: T.nilable(PgQuery::AlterExtensionStmt),
      alter_fdw_stmt: T.nilable(PgQuery::AlterFdwStmt),
      alter_foreign_server_stmt: T.nilable(PgQuery::AlterForeignServerStmt),
      alter_function_stmt: T.nilable(PgQuery::AlterFunctionStmt),
      alter_object_depends_stmt: T.nilable(PgQuery::AlterObjectDependsStmt),
      alter_object_schema_stmt: T.nilable(PgQuery::AlterObjectSchemaStmt),
      alter_op_family_stmt: T.nilable(PgQuery::AlterOpFamilyStmt),
      alter_operator_stmt: T.nilable(PgQuery::AlterOperatorStmt),
      alter_owner_stmt: T.nilable(PgQuery::AlterOwnerStmt),
      alter_policy_stmt: T.nilable(PgQuery::AlterPolicyStmt),
      alter_publication_stmt: T.nilable(PgQuery::AlterPublicationStmt),
      alter_role_set_stmt: T.nilable(PgQuery::AlterRoleSetStmt),
      alter_role_stmt: T.nilable(PgQuery::AlterRoleStmt),
      alter_seq_stmt: T.nilable(PgQuery::AlterSeqStmt),
      alter_stats_stmt: T.nilable(PgQuery::AlterStatsStmt),
      alter_subscription_stmt: T.nilable(PgQuery::AlterSubscriptionStmt),
      alter_system_stmt: T.nilable(PgQuery::AlterSystemStmt),
      alter_table_cmd: T.nilable(PgQuery::AlterTableCmd),
      alter_table_move_all_stmt: T.nilable(PgQuery::AlterTableMoveAllStmt),
      alter_table_space_options_stmt: T.nilable(PgQuery::AlterTableSpaceOptionsStmt),
      alter_table_stmt: T.nilable(PgQuery::AlterTableStmt),
      alter_tsconfiguration_stmt: T.nilable(PgQuery::AlterTSConfigurationStmt),
      alter_tsdictionary_stmt: T.nilable(PgQuery::AlterTSDictionaryStmt),
      alter_type_stmt: T.nilable(PgQuery::AlterTypeStmt),
      alter_user_mapping_stmt: T.nilable(PgQuery::AlterUserMappingStmt),
      alternative_sub_plan: T.nilable(PgQuery::AlternativeSubPlan),
      array_coerce_expr: T.nilable(PgQuery::ArrayCoerceExpr),
      array_expr: T.nilable(PgQuery::ArrayExpr),
      bit_string: T.nilable(PgQuery::BitString),
      bool_expr: T.nilable(PgQuery::BoolExpr),
      boolean: T.nilable(PgQuery::Boolean),
      boolean_test: T.nilable(PgQuery::BooleanTest),
      call_context: T.nilable(PgQuery::CallContext),
      call_stmt: T.nilable(PgQuery::CallStmt),
      case_expr: T.nilable(PgQuery::CaseExpr),
      case_test_expr: T.nilable(PgQuery::CaseTestExpr),
      case_when: T.nilable(PgQuery::CaseWhen),
      check_point_stmt: T.nilable(PgQuery::CheckPointStmt),
      close_portal_stmt: T.nilable(PgQuery::ClosePortalStmt),
      cluster_stmt: T.nilable(PgQuery::ClusterStmt),
      coalesce_expr: T.nilable(PgQuery::CoalesceExpr),
      coerce_to_domain: T.nilable(PgQuery::CoerceToDomain),
      coerce_to_domain_value: T.nilable(PgQuery::CoerceToDomainValue),
      coerce_via_io: T.nilable(PgQuery::CoerceViaIO),
      collate_clause: T.nilable(PgQuery::CollateClause),
      collate_expr: T.nilable(PgQuery::CollateExpr),
      column_def: T.nilable(PgQuery::ColumnDef),
      column_ref: T.nilable(PgQuery::ColumnRef),
      comment_stmt: T.nilable(PgQuery::CommentStmt),
      common_table_expr: T.nilable(PgQuery::CommonTableExpr),
      composite_type_stmt: T.nilable(PgQuery::CompositeTypeStmt),
      constraint: T.nilable(PgQuery::Constraint),
      constraints_set_stmt: T.nilable(PgQuery::ConstraintsSetStmt),
      convert_rowtype_expr: T.nilable(PgQuery::ConvertRowtypeExpr),
      copy_stmt: T.nilable(PgQuery::CopyStmt),
      create_am_stmt: T.nilable(PgQuery::CreateAmStmt),
      create_cast_stmt: T.nilable(PgQuery::CreateCastStmt),
      create_conversion_stmt: T.nilable(PgQuery::CreateConversionStmt),
      create_domain_stmt: T.nilable(PgQuery::CreateDomainStmt),
      create_enum_stmt: T.nilable(PgQuery::CreateEnumStmt),
      create_event_trig_stmt: T.nilable(PgQuery::CreateEventTrigStmt),
      create_extension_stmt: T.nilable(PgQuery::CreateExtensionStmt),
      create_fdw_stmt: T.nilable(PgQuery::CreateFdwStmt),
      create_foreign_server_stmt: T.nilable(PgQuery::CreateForeignServerStmt),
      create_foreign_table_stmt: T.nilable(PgQuery::CreateForeignTableStmt),
      create_function_stmt: T.nilable(PgQuery::CreateFunctionStmt),
      create_op_class_item: T.nilable(PgQuery::CreateOpClassItem),
      create_op_class_stmt: T.nilable(PgQuery::CreateOpClassStmt),
      create_op_family_stmt: T.nilable(PgQuery::CreateOpFamilyStmt),
      create_plang_stmt: T.nilable(PgQuery::CreatePLangStmt),
      create_policy_stmt: T.nilable(PgQuery::CreatePolicyStmt),
      create_publication_stmt: T.nilable(PgQuery::CreatePublicationStmt),
      create_range_stmt: T.nilable(PgQuery::CreateRangeStmt),
      create_role_stmt: T.nilable(PgQuery::CreateRoleStmt),
      create_schema_stmt: T.nilable(PgQuery::CreateSchemaStmt),
      create_seq_stmt: T.nilable(PgQuery::CreateSeqStmt),
      create_stats_stmt: T.nilable(PgQuery::CreateStatsStmt),
      create_stmt: T.nilable(PgQuery::CreateStmt),
      create_subscription_stmt: T.nilable(PgQuery::CreateSubscriptionStmt),
      create_table_as_stmt: T.nilable(PgQuery::CreateTableAsStmt),
      create_table_space_stmt: T.nilable(PgQuery::CreateTableSpaceStmt),
      create_transform_stmt: T.nilable(PgQuery::CreateTransformStmt),
      create_trig_stmt: T.nilable(PgQuery::CreateTrigStmt),
      create_user_mapping_stmt: T.nilable(PgQuery::CreateUserMappingStmt),
      createdb_stmt: T.nilable(PgQuery::CreatedbStmt),
      ctecycle_clause: T.nilable(PgQuery::CTECycleClause),
      ctesearch_clause: T.nilable(PgQuery::CTESearchClause),
      current_of_expr: T.nilable(PgQuery::CurrentOfExpr),
      deallocate_stmt: T.nilable(PgQuery::DeallocateStmt),
      declare_cursor_stmt: T.nilable(PgQuery::DeclareCursorStmt),
      def_elem: T.nilable(PgQuery::DefElem),
      define_stmt: T.nilable(PgQuery::DefineStmt),
      delete_stmt: T.nilable(PgQuery::DeleteStmt),
      discard_stmt: T.nilable(PgQuery::DiscardStmt),
      distinct_expr: T.nilable(PgQuery::DistinctExpr),
      do_stmt: T.nilable(PgQuery::DoStmt),
      drop_owned_stmt: T.nilable(PgQuery::DropOwnedStmt),
      drop_role_stmt: T.nilable(PgQuery::DropRoleStmt),
      drop_stmt: T.nilable(PgQuery::DropStmt),
      drop_subscription_stmt: T.nilable(PgQuery::DropSubscriptionStmt),
      drop_table_space_stmt: T.nilable(PgQuery::DropTableSpaceStmt),
      drop_user_mapping_stmt: T.nilable(PgQuery::DropUserMappingStmt),
      dropdb_stmt: T.nilable(PgQuery::DropdbStmt),
      execute_stmt: T.nilable(PgQuery::ExecuteStmt),
      explain_stmt: T.nilable(PgQuery::ExplainStmt),
      fetch_stmt: T.nilable(PgQuery::FetchStmt),
      field_select: T.nilable(PgQuery::FieldSelect),
      field_store: T.nilable(PgQuery::FieldStore),
      float: T.nilable(PgQuery::Float),
      from_expr: T.nilable(PgQuery::FromExpr),
      func_call: T.nilable(PgQuery::FuncCall),
      func_expr: T.nilable(PgQuery::FuncExpr),
      function_parameter: T.nilable(PgQuery::FunctionParameter),
      grant_role_stmt: T.nilable(PgQuery::GrantRoleStmt),
      grant_stmt: T.nilable(PgQuery::GrantStmt),
      grouping_func: T.nilable(PgQuery::GroupingFunc),
      grouping_set: T.nilable(PgQuery::GroupingSet),
      import_foreign_schema_stmt: T.nilable(PgQuery::ImportForeignSchemaStmt),
      index_elem: T.nilable(PgQuery::IndexElem),
      index_stmt: T.nilable(PgQuery::IndexStmt),
      infer_clause: T.nilable(PgQuery::InferClause),
      inference_elem: T.nilable(PgQuery::InferenceElem),
      inline_code_block: T.nilable(PgQuery::InlineCodeBlock),
      insert_stmt: T.nilable(PgQuery::InsertStmt),
      int_list: T.nilable(PgQuery::IntList),
      integer: T.nilable(PgQuery::Integer),
      into_clause: T.nilable(PgQuery::IntoClause),
      join_expr: T.nilable(PgQuery::JoinExpr),
      json_agg_constructor: T.nilable(PgQuery::JsonAggConstructor),
      json_argument: T.nilable(PgQuery::JsonArgument),
      json_array_agg: T.nilable(PgQuery::JsonArrayAgg),
      json_array_constructor: T.nilable(PgQuery::JsonArrayConstructor),
      json_array_query_constructor: T.nilable(PgQuery::JsonArrayQueryConstructor),
      json_behavior: T.nilable(PgQuery::JsonBehavior),
      json_constructor_expr: T.nilable(PgQuery::JsonConstructorExpr),
      json_expr: T.nilable(PgQuery::JsonExpr),
      json_format: T.nilable(PgQuery::JsonFormat),
      json_func_expr: T.nilable(PgQuery::JsonFuncExpr),
      json_is_predicate: T.nilable(PgQuery::JsonIsPredicate),
      json_key_value: T.nilable(PgQuery::JsonKeyValue),
      json_object_agg: T.nilable(PgQuery::JsonObjectAgg),
      json_object_constructor: T.nilable(PgQuery::JsonObjectConstructor),
      json_output: T.nilable(PgQuery::JsonOutput),
      json_parse_expr: T.nilable(PgQuery::JsonParseExpr),
      json_returning: T.nilable(PgQuery::JsonReturning),
      json_scalar_expr: T.nilable(PgQuery::JsonScalarExpr),
      json_serialize_expr: T.nilable(PgQuery::JsonSerializeExpr),
      json_table: T.nilable(PgQuery::JsonTable),
      json_table_column: T.nilable(PgQuery::JsonTableColumn),
      json_table_path: T.nilable(PgQuery::JsonTablePath),
      json_table_path_scan: T.nilable(PgQuery::JsonTablePathScan),
      json_table_path_spec: T.nilable(PgQuery::JsonTablePathSpec),
      json_table_sibling_join: T.nilable(PgQuery::JsonTableSiblingJoin),
      json_value_expr: T.nilable(PgQuery::JsonValueExpr),
      list: T.nilable(PgQuery::List),
      listen_stmt: T.nilable(PgQuery::ListenStmt),
      load_stmt: T.nilable(PgQuery::LoadStmt),
      lock_stmt: T.nilable(PgQuery::LockStmt),
      locking_clause: T.nilable(PgQuery::LockingClause),
      merge_action: T.nilable(PgQuery::MergeAction),
      merge_stmt: T.nilable(PgQuery::MergeStmt),
      merge_support_func: T.nilable(PgQuery::MergeSupportFunc),
      merge_when_clause: T.nilable(PgQuery::MergeWhenClause),
      min_max_expr: T.nilable(PgQuery::MinMaxExpr),
      multi_assign_ref: T.nilable(PgQuery::MultiAssignRef),
      named_arg_expr: T.nilable(PgQuery::NamedArgExpr),
      next_value_expr: T.nilable(PgQuery::NextValueExpr),
      notify_stmt: T.nilable(PgQuery::NotifyStmt),
      null_if_expr: T.nilable(PgQuery::NullIfExpr),
      null_test: T.nilable(PgQuery::NullTest),
      object_with_args: T.nilable(PgQuery::ObjectWithArgs),
      oid_list: T.nilable(PgQuery::OidList),
      on_conflict_clause: T.nilable(PgQuery::OnConflictClause),
      on_conflict_expr: T.nilable(PgQuery::OnConflictExpr),
      op_expr: T.nilable(PgQuery::OpExpr),
      param: T.nilable(PgQuery::Param),
      param_ref: T.nilable(PgQuery::ParamRef),
      partition_bound_spec: T.nilable(PgQuery::PartitionBoundSpec),
      partition_cmd: T.nilable(PgQuery::PartitionCmd),
      partition_elem: T.nilable(PgQuery::PartitionElem),
      partition_range_datum: T.nilable(PgQuery::PartitionRangeDatum),
      partition_spec: T.nilable(PgQuery::PartitionSpec),
      plassign_stmt: T.nilable(PgQuery::PLAssignStmt),
      prepare_stmt: T.nilable(PgQuery::PrepareStmt),
      publication_obj_spec: T.nilable(PgQuery::PublicationObjSpec),
      publication_table: T.nilable(PgQuery::PublicationTable),
      query: T.nilable(PgQuery::Query),
      range_function: T.nilable(PgQuery::RangeFunction),
      range_subselect: T.nilable(PgQuery::RangeSubselect),
      range_table_func: T.nilable(PgQuery::RangeTableFunc),
      range_table_func_col: T.nilable(PgQuery::RangeTableFuncCol),
      range_table_sample: T.nilable(PgQuery::RangeTableSample),
      range_tbl_entry: T.nilable(PgQuery::RangeTblEntry),
      range_tbl_function: T.nilable(PgQuery::RangeTblFunction),
      range_tbl_ref: T.nilable(PgQuery::RangeTblRef),
      range_var: T.nilable(PgQuery::RangeVar),
      raw_stmt: T.nilable(PgQuery::RawStmt),
      reassign_owned_stmt: T.nilable(PgQuery::ReassignOwnedStmt),
      refresh_mat_view_stmt: T.nilable(PgQuery::RefreshMatViewStmt),
      reindex_stmt: T.nilable(PgQuery::ReindexStmt),
      relabel_type: T.nilable(PgQuery::RelabelType),
      rename_stmt: T.nilable(PgQuery::RenameStmt),
      replica_identity_stmt: T.nilable(PgQuery::ReplicaIdentityStmt),
      res_target: T.nilable(PgQuery::ResTarget),
      return_stmt: T.nilable(PgQuery::ReturnStmt),
      role_spec: T.nilable(PgQuery::RoleSpec),
      row_compare_expr: T.nilable(PgQuery::RowCompareExpr),
      row_expr: T.nilable(PgQuery::RowExpr),
      row_mark_clause: T.nilable(PgQuery::RowMarkClause),
      rtepermission_info: T.nilable(PgQuery::RTEPermissionInfo),
      rule_stmt: T.nilable(PgQuery::RuleStmt),
      scalar_array_op_expr: T.nilable(PgQuery::ScalarArrayOpExpr),
      sec_label_stmt: T.nilable(PgQuery::SecLabelStmt),
      select_stmt: T.nilable(PgQuery::SelectStmt),
      set_operation_stmt: T.nilable(PgQuery::SetOperationStmt),
      set_to_default: T.nilable(PgQuery::SetToDefault),
      single_partition_spec: T.nilable(PgQuery::SinglePartitionSpec),
      sort_by: T.nilable(PgQuery::SortBy),
      sort_group_clause: T.nilable(PgQuery::SortGroupClause),
      sqlvalue_function: T.nilable(PgQuery::SQLValueFunction),
      stats_elem: T.nilable(PgQuery::StatsElem),
      string: T.nilable(PgQuery::String),
      sub_link: T.nilable(PgQuery::SubLink),
      sub_plan: T.nilable(PgQuery::SubPlan),
      subscripting_ref: T.nilable(PgQuery::SubscriptingRef),
      table_func: T.nilable(PgQuery::TableFunc),
      table_like_clause: T.nilable(PgQuery::TableLikeClause),
      table_sample_clause: T.nilable(PgQuery::TableSampleClause),
      target_entry: T.nilable(PgQuery::TargetEntry),
      transaction_stmt: T.nilable(PgQuery::TransactionStmt),
      trigger_transition: T.nilable(PgQuery::TriggerTransition),
      truncate_stmt: T.nilable(PgQuery::TruncateStmt),
      type_cast: T.nilable(PgQuery::TypeCast),
      type_name: T.nilable(PgQuery::TypeName),
      unlisten_stmt: T.nilable(PgQuery::UnlistenStmt),
      update_stmt: T.nilable(PgQuery::UpdateStmt),
      vacuum_relation: T.nilable(PgQuery::VacuumRelation),
      vacuum_stmt: T.nilable(PgQuery::VacuumStmt),
      var: T.nilable(PgQuery::Var),
      variable_set_stmt: T.nilable(PgQuery::VariableSetStmt),
      variable_show_stmt: T.nilable(PgQuery::VariableShowStmt),
      view_stmt: T.nilable(PgQuery::ViewStmt),
      window_clause: T.nilable(PgQuery::WindowClause),
      window_def: T.nilable(PgQuery::WindowDef),
      window_func: T.nilable(PgQuery::WindowFunc),
      window_func_run_condition: T.nilable(PgQuery::WindowFuncRunCondition),
      with_check_option: T.nilable(PgQuery::WithCheckOption),
      with_clause: T.nilable(PgQuery::WithClause),
      xml_expr: T.nilable(PgQuery::XmlExpr),
      xml_serialize: T.nilable(PgQuery::XmlSerialize)
    ).void
  end
  def initialize(a_array_expr: nil, a_const: nil, a_expr: nil, a_indices: nil, a_indirection: nil, a_star: nil, access_priv: nil, aggref: nil, alias: nil, alter_collation_stmt: nil, alter_database_refresh_coll_stmt: nil, alter_database_set_stmt: nil, alter_database_stmt: nil, alter_default_privileges_stmt: nil, alter_domain_stmt: nil, alter_enum_stmt: nil, alter_event_trig_stmt: nil, alter_extension_contents_stmt: nil, alter_extension_stmt: nil, alter_fdw_stmt: nil, alter_foreign_server_stmt: nil, alter_function_stmt: nil, alter_object_depends_stmt: nil, alter_object_schema_stmt: nil, alter_op_family_stmt: nil, alter_operator_stmt: nil, alter_owner_stmt: nil, alter_policy_stmt: nil, alter_publication_stmt: nil, alter_role_set_stmt: nil, alter_role_stmt: nil, alter_seq_stmt: nil, alter_stats_stmt: nil, alter_subscription_stmt: nil, alter_system_stmt: nil, alter_table_cmd: nil, alter_table_move_all_stmt: nil, alter_table_space_options_stmt: nil, alter_table_stmt: nil, alter_tsconfiguration_stmt: nil, alter_tsdictionary_stmt: nil, alter_type_stmt: nil, alter_user_mapping_stmt: nil, alternative_sub_plan: nil, array_coerce_expr: nil, array_expr: nil, bit_string: nil, bool_expr: nil, boolean: nil, boolean_test: nil, call_context: nil, call_stmt: nil, case_expr: nil, case_test_expr: nil, case_when: nil, check_point_stmt: nil, close_portal_stmt: nil, cluster_stmt: nil, coalesce_expr: nil, coerce_to_domain: nil, coerce_to_domain_value: nil, coerce_via_io: nil, collate_clause: nil, collate_expr: nil, column_def: nil, column_ref: nil, comment_stmt: nil, common_table_expr: nil, composite_type_stmt: nil, constraint: nil, constraints_set_stmt: nil, convert_rowtype_expr: nil, copy_stmt: nil, create_am_stmt: nil, create_cast_stmt: nil, create_conversion_stmt: nil, create_domain_stmt: nil, create_enum_stmt: nil, create_event_trig_stmt: nil, create_extension_stmt: nil, create_fdw_stmt: nil, create_foreign_server_stmt: nil, create_foreign_table_stmt: nil, create_function_stmt: nil, create_op_class_item: nil, create_op_class_stmt: nil, create_op_family_stmt: nil, create_plang_stmt: nil, create_policy_stmt: nil, create_publication_stmt: nil, create_range_stmt: nil, create_role_stmt: nil, create_schema_stmt: nil, create_seq_stmt: nil, create_stats_stmt: nil, create_stmt: nil, create_subscription_stmt: nil, create_table_as_stmt: nil, create_table_space_stmt: nil, create_transform_stmt: nil, create_trig_stmt: nil, create_user_mapping_stmt: nil, createdb_stmt: nil, ctecycle_clause: nil, ctesearch_clause: nil, current_of_expr: nil, deallocate_stmt: nil, declare_cursor_stmt: nil, def_elem: nil, define_stmt: nil, delete_stmt: nil, discard_stmt: nil, distinct_expr: nil, do_stmt: nil, drop_owned_stmt: nil, drop_role_stmt: nil, drop_stmt: nil, drop_subscription_stmt: nil, drop_table_space_stmt: nil, drop_user_mapping_stmt: nil, dropdb_stmt: nil, execute_stmt: nil, explain_stmt: nil, fetch_stmt: nil, field_select: nil, field_store: nil, float: nil, from_expr: nil, func_call: nil, func_expr: nil, function_parameter: nil, grant_role_stmt: nil, grant_stmt: nil, grouping_func: nil, grouping_set: nil, import_foreign_schema_stmt: nil, index_elem: nil, index_stmt: nil, infer_clause: nil, inference_elem: nil, inline_code_block: nil, insert_stmt: nil, int_list: nil, integer: nil, into_clause: nil, join_expr: nil, json_agg_constructor: nil, json_argument: nil, json_array_agg: nil, json_array_constructor: nil, json_array_query_constructor: nil, json_behavior: nil, json_constructor_expr: nil, json_expr: nil, json_format: nil, json_func_expr: nil, json_is_predicate: nil, json_key_value: nil, json_object_agg: nil, json_object_constructor: nil, json_output: nil, json_parse_expr: nil, json_returning: nil, json_scalar_expr: nil, json_serialize_expr: nil, json_table: nil, json_table_column: nil, json_table_path: nil, json_table_path_scan: nil, json_table_path_spec: nil, json_table_sibling_join: nil, json_value_expr: nil, list: nil, listen_stmt: nil, load_stmt: nil, lock_stmt: nil, locking_clause: nil, merge_action: nil, merge_stmt: nil, merge_support_func: nil, merge_when_clause: nil, min_max_expr: nil, multi_assign_ref: nil, named_arg_expr: nil, next_value_expr: nil, notify_stmt: nil, null_if_expr: nil, null_test: nil, object_with_args: nil, oid_list: nil, on_conflict_clause: nil, on_conflict_expr: nil, op_expr: nil, param: nil, param_ref: nil, partition_bound_spec: nil, partition_cmd: nil, partition_elem: nil, partition_range_datum: nil, partition_spec: nil, plassign_stmt: nil, prepare_stmt: nil, publication_obj_spec: nil, publication_table: nil, query: nil, range_function: nil, range_subselect: nil, range_table_func: nil, range_table_func_col: nil, range_table_sample: nil, range_tbl_entry: nil, range_tbl_function: nil, range_tbl_ref: nil, range_var: nil, raw_stmt: nil, reassign_owned_stmt: nil, refresh_mat_view_stmt: nil, reindex_stmt: nil, relabel_type: nil, rename_stmt: nil, replica_identity_stmt: nil, res_target: nil, return_stmt: nil, role_spec: nil, row_compare_expr: nil, row_expr: nil, row_mark_clause: nil, rtepermission_info: nil, rule_stmt: nil, scalar_array_op_expr: nil, sec_label_stmt: nil, select_stmt: nil, set_operation_stmt: nil, set_to_default: nil, single_partition_spec: nil, sort_by: nil, sort_group_clause: nil, sqlvalue_function: nil, stats_elem: nil, string: nil, sub_link: nil, sub_plan: nil, subscripting_ref: nil, table_func: nil, table_like_clause: nil, table_sample_clause: nil, target_entry: nil, transaction_stmt: nil, trigger_transition: nil, truncate_stmt: nil, type_cast: nil, type_name: nil, unlisten_stmt: nil, update_stmt: nil, vacuum_relation: nil, vacuum_stmt: nil, var: nil, variable_set_stmt: nil, variable_show_stmt: nil, view_stmt: nil, window_clause: nil, window_def: nil, window_func: nil, window_func_run_condition: nil, with_check_option: nil, with_clause: nil, xml_expr: nil, xml_serialize: nil); end

  sig { returns(T.nilable(PgQuery::A_ArrayExpr)) }
  def a_array_expr; end

  sig { params(value: T.nilable(PgQuery::A_ArrayExpr)).void }
  def a_array_expr=(value); end

  sig { returns(T.nilable(PgQuery::A_Const)) }
  def a_const; end

  sig { params(value: T.nilable(PgQuery::A_Const)).void }
  def a_const=(value); end

  sig { returns(T.nilable(PgQuery::A_Expr)) }
  def a_expr; end

  sig { params(value: T.nilable(PgQuery::A_Expr)).void }
  def a_expr=(value); end

  sig { returns(T.nilable(PgQuery::A_Indices)) }
  def a_indices; end

  sig { params(value: T.nilable(PgQuery::A_Indices)).void }
  def a_indices=(value); end

  sig { returns(T.nilable(PgQuery::A_Indirection)) }
  def a_indirection; end

  sig { params(value: T.nilable(PgQuery::A_Indirection)).void }
  def a_indirection=(value); end

  sig { returns(T.nilable(PgQuery::A_Star)) }
  def a_star; end

  sig { params(value: T.nilable(PgQuery::A_Star)).void }
  def a_star=(value); end

  sig { returns(T.nilable(PgQuery::AccessPriv)) }
  def access_priv; end

  sig { params(value: T.nilable(PgQuery::AccessPriv)).void }
  def access_priv=(value); end

  sig { returns(T.nilable(PgQuery::Aggref)) }
  def aggref; end

  sig { params(value: T.nilable(PgQuery::Aggref)).void }
  def aggref=(value); end

  sig { returns(T.nilable(PgQuery::Alias)) }
  def alias; end

  sig { params(value: T.nilable(PgQuery::Alias)).void }
  def alias=(value); end

  sig { returns(T.nilable(PgQuery::AlterCollationStmt)) }
  def alter_collation_stmt; end

  sig { params(value: T.nilable(PgQuery::AlterCollationStmt)).void }
  def alter_collation_stmt=(value); end

  sig { returns(T.nilable(PgQuery::AlterDatabaseRefreshCollStmt)) }
  def alter_database_refresh_coll_stmt; end

  sig { params(value: T.nilable(PgQuery::AlterDatabaseRefreshCollStmt)).void }
  def alter_database_refresh_coll_stmt=(value); end

  sig { returns(T.nilable(PgQuery::AlterDatabaseSetStmt)) }
  def alter_database_set_stmt; end

  sig { params(value: T.nilable(PgQuery::AlterDatabaseSetStmt)).void }
  def alter_database_set_stmt=(value); end

  sig { returns(T.nilable(PgQuery::AlterDatabaseStmt)) }
  def alter_database_stmt; end

  sig { params(value: T.nilable(PgQuery::AlterDatabaseStmt)).void }
  def alter_database_stmt=(value); end

  sig { returns(T.nilable(PgQuery::AlterDefaultPrivilegesStmt)) }
  def alter_default_privileges_stmt; end

  sig { params(value: T.nilable(PgQuery::AlterDefaultPrivilegesStmt)).void }
  def alter_default_privileges_stmt=(value); end

  sig { returns(T.nilable(PgQuery::AlterDomainStmt)) }
  def alter_domain_stmt; end

  sig { params(value: T.nilable(PgQuery::AlterDomainStmt)).void }
  def alter_domain_stmt=(value); end

  sig { returns(T.nilable(PgQuery::AlterEnumStmt)) }
  def alter_enum_stmt; end

  sig { params(value: T.nilable(PgQuery::AlterEnumStmt)).void }
  def alter_enum_stmt=(value); end

  sig { returns(T.nilable(PgQuery::AlterEventTrigStmt)) }
  def alter_event_trig_stmt; end

  sig { params(value: T.nilable(PgQuery::AlterEventTrigStmt)).void }
  def alter_event_trig_stmt=(value); end

  sig { returns(T.nilable(PgQuery::AlterExtensionContentsStmt)) }
  def alter_extension_contents_stmt; end

  sig { params(value: T.nilable(PgQuery::AlterExtensionContentsStmt)).void }
  def alter_extension_contents_stmt=(value); end

  sig { returns(T.nilable(PgQuery::AlterExtensionStmt)) }
  def alter_extension_stmt; end

  sig { params(value: T.nilable(PgQuery::AlterExtensionStmt)).void }
  def alter_extension_stmt=(value); end

  sig { returns(T.nilable(PgQuery::AlterFdwStmt)) }
  def alter_fdw_stmt; end

  sig { params(value: T.nilable(PgQuery::AlterFdwStmt)).void }
  def alter_fdw_stmt=(value); end

  sig { returns(T.nilable(PgQuery::AlterForeignServerStmt)) }
  def alter_foreign_server_stmt; end

  sig { params(value: T.nilable(PgQuery::AlterForeignServerStmt)).void }
  def alter_foreign_server_stmt=(value); end

  sig { returns(T.nilable(PgQuery::AlterFunctionStmt)) }
  def alter_function_stmt; end

  sig { params(value: T.nilable(PgQuery::AlterFunctionStmt)).void }
  def alter_function_stmt=(value); end

  sig { returns(T.nilable(PgQuery::AlterObjectDependsStmt)) }
  def alter_object_depends_stmt; end

  sig { params(value: T.nilable(PgQuery::AlterObjectDependsStmt)).void }
  def alter_object_depends_stmt=(value); end

  sig { returns(T.nilable(PgQuery::AlterObjectSchemaStmt)) }
  def alter_object_schema_stmt; end

  sig { params(value: T.nilable(PgQuery::AlterObjectSchemaStmt)).void }
  def alter_object_schema_stmt=(value); end

  sig { returns(T.nilable(PgQuery::AlterOpFamilyStmt)) }
  def alter_op_family_stmt; end

  sig { params(value: T.nilable(PgQuery::AlterOpFamilyStmt)).void }
  def alter_op_family_stmt=(value); end

  sig { returns(T.nilable(PgQuery::AlterOperatorStmt)) }
  def alter_operator_stmt; end

  sig { params(value: T.nilable(PgQuery::AlterOperatorStmt)).void }
  def alter_operator_stmt=(value); end

  sig { returns(T.nilable(PgQuery::AlterOwnerStmt)) }
  def alter_owner_stmt; end

  sig { params(value: T.nilable(PgQuery::AlterOwnerStmt)).void }
  def alter_owner_stmt=(value); end

  sig { returns(T.nilable(PgQuery::AlterPolicyStmt)) }
  def alter_policy_stmt; end

  sig { params(value: T.nilable(PgQuery::AlterPolicyStmt)).void }
  def alter_policy_stmt=(value); end

  sig { returns(T.nilable(PgQuery::AlterPublicationStmt)) }
  def alter_publication_stmt; end

  sig { params(value: T.nilable(PgQuery::AlterPublicationStmt)).void }
  def alter_publication_stmt=(value); end

  sig { returns(T.nilable(PgQuery::AlterRoleSetStmt)) }
  def alter_role_set_stmt; end

  sig { params(value: T.nilable(PgQuery::AlterRoleSetStmt)).void }
  def alter_role_set_stmt=(value); end

  sig { returns(T.nilable(PgQuery::AlterRoleStmt)) }
  def alter_role_stmt; end

  sig { params(value: T.nilable(PgQuery::AlterRoleStmt)).void }
  def alter_role_stmt=(value); end

  sig { returns(T.nilable(PgQuery::AlterSeqStmt)) }
  def alter_seq_stmt; end

  sig { params(value: T.nilable(PgQuery::AlterSeqStmt)).void }
  def alter_seq_stmt=(value); end

  sig { returns(T.nilable(PgQuery::AlterStatsStmt)) }
  def alter_stats_stmt; end

  sig { params(value: T.nilable(PgQuery::AlterStatsStmt)).void }
  def alter_stats_stmt=(value); end

  sig { returns(T.nilable(PgQuery::AlterSubscriptionStmt)) }
  def alter_subscription_stmt; end

  sig { params(value: T.nilable(PgQuery::AlterSubscriptionStmt)).void }
  def alter_subscription_stmt=(value); end

  sig { returns(T.nilable(PgQuery::AlterSystemStmt)) }
  def alter_system_stmt; end

  sig { params(value: T.nilable(PgQuery::AlterSystemStmt)).void }
  def alter_system_stmt=(value); end

  sig { returns(T.nilable(PgQuery::AlterTableCmd)) }
  def alter_table_cmd; end

  sig { params(value: T.nilable(PgQuery::AlterTableCmd)).void }
  def alter_table_cmd=(value); end

  sig { returns(T.nilable(PgQuery::AlterTableMoveAllStmt)) }
  def alter_table_move_all_stmt; end

  sig { params(value: T.nilable(PgQuery::AlterTableMoveAllStmt)).void }
  def alter_table_move_all_stmt=(value); end

  sig { returns(T.nilable(PgQuery::AlterTableSpaceOptionsStmt)) }
  def alter_table_space_options_stmt; end

  sig { params(value: T.nilable(PgQuery::AlterTableSpaceOptionsStmt)).void }
  def alter_table_space_options_stmt=(value); end

  sig { returns(T.nilable(PgQuery::AlterTableStmt)) }
  def alter_table_stmt; end

  sig { params(value: T.nilable(PgQuery::AlterTableStmt)).void }
  def alter_table_stmt=(value); end

  sig { returns(T.nilable(PgQuery::AlterTSConfigurationStmt)) }
  def alter_tsconfiguration_stmt; end

  sig { params(value: T.nilable(PgQuery::AlterTSConfigurationStmt)).void }
  def alter_tsconfiguration_stmt=(value); end

  sig { returns(T.nilable(PgQuery::AlterTSDictionaryStmt)) }
  def alter_tsdictionary_stmt; end

  sig { params(value: T.nilable(PgQuery::AlterTSDictionaryStmt)).void }
  def alter_tsdictionary_stmt=(value); end

  sig { returns(T.nilable(PgQuery::AlterTypeStmt)) }
  def alter_type_stmt; end

  sig { params(value: T.nilable(PgQuery::AlterTypeStmt)).void }
  def alter_type_stmt=(value); end

  sig { returns(T.nilable(PgQuery::AlterUserMappingStmt)) }
  def alter_user_mapping_stmt; end

  sig { params(value: T.nilable(PgQuery::AlterUserMappingStmt)).void }
  def alter_user_mapping_stmt=(value); end

  sig { returns(T.nilable(PgQuery::AlternativeSubPlan)) }
  def alternative_sub_plan; end

  sig { params(value: T.nilable(PgQuery::AlternativeSubPlan)).void }
  def alternative_sub_plan=(value); end

  sig { returns(T.nilable(PgQuery::ArrayCoerceExpr)) }
  def array_coerce_expr; end

  sig { params(value: T.nilable(PgQuery::ArrayCoerceExpr)).void }
  def array_coerce_expr=(value); end

  sig { returns(T.nilable(PgQuery::ArrayExpr)) }
  def array_expr; end

  sig { params(value: T.nilable(PgQuery::ArrayExpr)).void }
  def array_expr=(value); end

  sig { returns(T.nilable(PgQuery::BitString)) }
  def bit_string; end

  sig { params(value: T.nilable(PgQuery::BitString)).void }
  def bit_string=(value); end

  sig { returns(T.nilable(PgQuery::BoolExpr)) }
  def bool_expr; end

  sig { params(value: T.nilable(PgQuery::BoolExpr)).void }
  def bool_expr=(value); end

  sig { returns(T.nilable(PgQuery::Boolean)) }
  def boolean; end

  sig { params(value: T.nilable(PgQuery::Boolean)).void }
  def boolean=(value); end

  sig { returns(T.nilable(PgQuery::BooleanTest)) }
  def boolean_test; end

  sig { params(value: T.nilable(PgQuery::BooleanTest)).void }
  def boolean_test=(value); end

  sig { returns(T.nilable(PgQuery::CallContext)) }
  def call_context; end

  sig { params(value: T.nilable(PgQuery::CallContext)).void }
  def call_context=(value); end

  sig { returns(T.nilable(PgQuery::CallStmt)) }
  def call_stmt; end

  sig { params(value: T.nilable(PgQuery::CallStmt)).void }
  def call_stmt=(value); end

  sig { returns(T.nilable(PgQuery::CaseExpr)) }
  def case_expr; end

  sig { params(value: T.nilable(PgQuery::CaseExpr)).void }
  def case_expr=(value); end

  sig { returns(T.nilable(PgQuery::CaseTestExpr)) }
  def case_test_expr; end

  sig { params(value: T.nilable(PgQuery::CaseTestExpr)).void }
  def case_test_expr=(value); end

  sig { returns(T.nilable(PgQuery::CaseWhen)) }
  def case_when; end

  sig { params(value: T.nilable(PgQuery::CaseWhen)).void }
  def case_when=(value); end

  sig { returns(T.nilable(PgQuery::CheckPointStmt)) }
  def check_point_stmt; end

  sig { params(value: T.nilable(PgQuery::CheckPointStmt)).void }
  def check_point_stmt=(value); end

  sig { void }
  def clear_a_array_expr; end

  sig { void }
  def clear_a_const; end

  sig { void }
  def clear_a_expr; end

  sig { void }
  def clear_a_indices; end

  sig { void }
  def clear_a_indirection; end

  sig { void }
  def clear_a_star; end

  sig { void }
  def clear_access_priv; end

  sig { void }
  def clear_aggref; end

  sig { void }
  def clear_alias; end

  sig { void }
  def clear_alter_collation_stmt; end

  sig { void }
  def clear_alter_database_refresh_coll_stmt; end

  sig { void }
  def clear_alter_database_set_stmt; end

  sig { void }
  def clear_alter_database_stmt; end

  sig { void }
  def clear_alter_default_privileges_stmt; end

  sig { void }
  def clear_alter_domain_stmt; end

  sig { void }
  def clear_alter_enum_stmt; end

  sig { void }
  def clear_alter_event_trig_stmt; end

  sig { void }
  def clear_alter_extension_contents_stmt; end

  sig { void }
  def clear_alter_extension_stmt; end

  sig { void }
  def clear_alter_fdw_stmt; end

  sig { void }
  def clear_alter_foreign_server_stmt; end

  sig { void }
  def clear_alter_function_stmt; end

  sig { void }
  def clear_alter_object_depends_stmt; end

  sig { void }
  def clear_alter_object_schema_stmt; end

  sig { void }
  def clear_alter_op_family_stmt; end

  sig { void }
  def clear_alter_operator_stmt; end

  sig { void }
  def clear_alter_owner_stmt; end

  sig { void }
  def clear_alter_policy_stmt; end

  sig { void }
  def clear_alter_publication_stmt; end

  sig { void }
  def clear_alter_role_set_stmt; end

  sig { void }
  def clear_alter_role_stmt; end

  sig { void }
  def clear_alter_seq_stmt; end

  sig { void }
  def clear_alter_stats_stmt; end

  sig { void }
  def clear_alter_subscription_stmt; end

  sig { void }
  def clear_alter_system_stmt; end

  sig { void }
  def clear_alter_table_cmd; end

  sig { void }
  def clear_alter_table_move_all_stmt; end

  sig { void }
  def clear_alter_table_space_options_stmt; end

  sig { void }
  def clear_alter_table_stmt; end

  sig { void }
  def clear_alter_tsconfiguration_stmt; end

  sig { void }
  def clear_alter_tsdictionary_stmt; end

  sig { void }
  def clear_alter_type_stmt; end

  sig { void }
  def clear_alter_user_mapping_stmt; end

  sig { void }
  def clear_alternative_sub_plan; end

  sig { void }
  def clear_array_coerce_expr; end

  sig { void }
  def clear_array_expr; end

  sig { void }
  def clear_bit_string; end

  sig { void }
  def clear_bool_expr; end

  sig { void }
  def clear_boolean; end

  sig { void }
  def clear_boolean_test; end

  sig { void }
  def clear_call_context; end

  sig { void }
  def clear_call_stmt; end

  sig { void }
  def clear_case_expr; end

  sig { void }
  def clear_case_test_expr; end

  sig { void }
  def clear_case_when; end

  sig { void }
  def clear_check_point_stmt; end

  sig { void }
  def clear_close_portal_stmt; end

  sig { void }
  def clear_cluster_stmt; end

  sig { void }
  def clear_coalesce_expr; end

  sig { void }
  def clear_coerce_to_domain; end

  sig { void }
  def clear_coerce_to_domain_value; end

  sig { void }
  def clear_coerce_via_io; end

  sig { void }
  def clear_collate_clause; end

  sig { void }
  def clear_collate_expr; end

  sig { void }
  def clear_column_def; end

  sig { void }
  def clear_column_ref; end

  sig { void }
  def clear_comment_stmt; end

  sig { void }
  def clear_common_table_expr; end

  sig { void }
  def clear_composite_type_stmt; end

  sig { void }
  def clear_constraint; end

  sig { void }
  def clear_constraints_set_stmt; end

  sig { void }
  def clear_convert_rowtype_expr; end

  sig { void }
  def clear_copy_stmt; end

  sig { void }
  def clear_create_am_stmt; end

  sig { void }
  def clear_create_cast_stmt; end

  sig { void }
  def clear_create_conversion_stmt; end

  sig { void }
  def clear_create_domain_stmt; end

  sig { void }
  def clear_create_enum_stmt; end

  sig { void }
  def clear_create_event_trig_stmt; end

  sig { void }
  def clear_create_extension_stmt; end

  sig { void }
  def clear_create_fdw_stmt; end

  sig { void }
  def clear_create_foreign_server_stmt; end

  sig { void }
  def clear_create_foreign_table_stmt; end

  sig { void }
  def clear_create_function_stmt; end

  sig { void }
  def clear_create_op_class_item; end

  sig { void }
  def clear_create_op_class_stmt; end

  sig { void }
  def clear_create_op_family_stmt; end

  sig { void }
  def clear_create_plang_stmt; end

  sig { void }
  def clear_create_policy_stmt; end

  sig { void }
  def clear_create_publication_stmt; end

  sig { void }
  def clear_create_range_stmt; end

  sig { void }
  def clear_create_role_stmt; end

  sig { void }
  def clear_create_schema_stmt; end

  sig { void }
  def clear_create_seq_stmt; end

  sig { void }
  def clear_create_stats_stmt; end

  sig { void }
  def clear_create_stmt; end

  sig { void }
  def clear_create_subscription_stmt; end

  sig { void }
  def clear_create_table_as_stmt; end

  sig { void }
  def clear_create_table_space_stmt; end

  sig { void }
  def clear_create_transform_stmt; end

  sig { void }
  def clear_create_trig_stmt; end

  sig { void }
  def clear_create_user_mapping_stmt; end

  sig { void }
  def clear_createdb_stmt; end

  sig { void }
  def clear_ctecycle_clause; end

  sig { void }
  def clear_ctesearch_clause; end

  sig { void }
  def clear_current_of_expr; end

  sig { void }
  def clear_deallocate_stmt; end

  sig { void }
  def clear_declare_cursor_stmt; end

  sig { void }
  def clear_def_elem; end

  sig { void }
  def clear_define_stmt; end

  sig { void }
  def clear_delete_stmt; end

  sig { void }
  def clear_discard_stmt; end

  sig { void }
  def clear_distinct_expr; end

  sig { void }
  def clear_do_stmt; end

  sig { void }
  def clear_drop_owned_stmt; end

  sig { void }
  def clear_drop_role_stmt; end

  sig { void }
  def clear_drop_stmt; end

  sig { void }
  def clear_drop_subscription_stmt; end

  sig { void }
  def clear_drop_table_space_stmt; end

  sig { void }
  def clear_drop_user_mapping_stmt; end

  sig { void }
  def clear_dropdb_stmt; end

  sig { void }
  def clear_execute_stmt; end

  sig { void }
  def clear_explain_stmt; end

  sig { void }
  def clear_fetch_stmt; end

  sig { void }
  def clear_field_select; end

  sig { void }
  def clear_field_store; end

  sig { void }
  def clear_float; end

  sig { void }
  def clear_from_expr; end

  sig { void }
  def clear_func_call; end

  sig { void }
  def clear_func_expr; end

  sig { void }
  def clear_function_parameter; end

  sig { void }
  def clear_grant_role_stmt; end

  sig { void }
  def clear_grant_stmt; end

  sig { void }
  def clear_grouping_func; end

  sig { void }
  def clear_grouping_set; end

  sig { void }
  def clear_import_foreign_schema_stmt; end

  sig { void }
  def clear_index_elem; end

  sig { void }
  def clear_index_stmt; end

  sig { void }
  def clear_infer_clause; end

  sig { void }
  def clear_inference_elem; end

  sig { void }
  def clear_inline_code_block; end

  sig { void }
  def clear_insert_stmt; end

  sig { void }
  def clear_int_list; end

  sig { void }
  def clear_integer; end

  sig { void }
  def clear_into_clause; end

  sig { void }
  def clear_join_expr; end

  sig { void }
  def clear_json_agg_constructor; end

  sig { void }
  def clear_json_argument; end

  sig { void }
  def clear_json_array_agg; end

  sig { void }
  def clear_json_array_constructor; end

  sig { void }
  def clear_json_array_query_constructor; end

  sig { void }
  def clear_json_behavior; end

  sig { void }
  def clear_json_constructor_expr; end

  sig { void }
  def clear_json_expr; end

  sig { void }
  def clear_json_format; end

  sig { void }
  def clear_json_func_expr; end

  sig { void }
  def clear_json_is_predicate; end

  sig { void }
  def clear_json_key_value; end

  sig { void }
  def clear_json_object_agg; end

  sig { void }
  def clear_json_object_constructor; end

  sig { void }
  def clear_json_output; end

  sig { void }
  def clear_json_parse_expr; end

  sig { void }
  def clear_json_returning; end

  sig { void }
  def clear_json_scalar_expr; end

  sig { void }
  def clear_json_serialize_expr; end

  sig { void }
  def clear_json_table; end

  sig { void }
  def clear_json_table_column; end

  sig { void }
  def clear_json_table_path; end

  sig { void }
  def clear_json_table_path_scan; end

  sig { void }
  def clear_json_table_path_spec; end

  sig { void }
  def clear_json_table_sibling_join; end

  sig { void }
  def clear_json_value_expr; end

  sig { void }
  def clear_list; end

  sig { void }
  def clear_listen_stmt; end

  sig { void }
  def clear_load_stmt; end

  sig { void }
  def clear_lock_stmt; end

  sig { void }
  def clear_locking_clause; end

  sig { void }
  def clear_merge_action; end

  sig { void }
  def clear_merge_stmt; end

  sig { void }
  def clear_merge_support_func; end

  sig { void }
  def clear_merge_when_clause; end

  sig { void }
  def clear_min_max_expr; end

  sig { void }
  def clear_multi_assign_ref; end

  sig { void }
  def clear_named_arg_expr; end

  sig { void }
  def clear_next_value_expr; end

  sig { void }
  def clear_notify_stmt; end

  sig { void }
  def clear_null_if_expr; end

  sig { void }
  def clear_null_test; end

  sig { void }
  def clear_object_with_args; end

  sig { void }
  def clear_oid_list; end

  sig { void }
  def clear_on_conflict_clause; end

  sig { void }
  def clear_on_conflict_expr; end

  sig { void }
  def clear_op_expr; end

  sig { void }
  def clear_param; end

  sig { void }
  def clear_param_ref; end

  sig { void }
  def clear_partition_bound_spec; end

  sig { void }
  def clear_partition_cmd; end

  sig { void }
  def clear_partition_elem; end

  sig { void }
  def clear_partition_range_datum; end

  sig { void }
  def clear_partition_spec; end

  sig { void }
  def clear_plassign_stmt; end

  sig { void }
  def clear_prepare_stmt; end

  sig { void }
  def clear_publication_obj_spec; end

  sig { void }
  def clear_publication_table; end

  sig { void }
  def clear_query; end

  sig { void }
  def clear_range_function; end

  sig { void }
  def clear_range_subselect; end

  sig { void }
  def clear_range_table_func; end

  sig { void }
  def clear_range_table_func_col; end

  sig { void }
  def clear_range_table_sample; end

  sig { void }
  def clear_range_tbl_entry; end

  sig { void }
  def clear_range_tbl_function; end

  sig { void }
  def clear_range_tbl_ref; end

  sig { void }
  def clear_range_var; end

  sig { void }
  def clear_raw_stmt; end

  sig { void }
  def clear_reassign_owned_stmt; end

  sig { void }
  def clear_refresh_mat_view_stmt; end

  sig { void }
  def clear_reindex_stmt; end

  sig { void }
  def clear_relabel_type; end

  sig { void }
  def clear_rename_stmt; end

  sig { void }
  def clear_replica_identity_stmt; end

  sig { void }
  def clear_res_target; end

  sig { void }
  def clear_return_stmt; end

  sig { void }
  def clear_role_spec; end

  sig { void }
  def clear_row_compare_expr; end

  sig { void }
  def clear_row_expr; end

  sig { void }
  def clear_row_mark_clause; end

  sig { void }
  def clear_rtepermission_info; end

  sig { void }
  def clear_rule_stmt; end

  sig { void }
  def clear_scalar_array_op_expr; end

  sig { void }
  def clear_sec_label_stmt; end

  sig { void }
  def clear_select_stmt; end

  sig { void }
  def clear_set_operation_stmt; end

  sig { void }
  def clear_set_to_default; end

  sig { void }
  def clear_single_partition_spec; end

  sig { void }
  def clear_sort_by; end

  sig { void }
  def clear_sort_group_clause; end

  sig { void }
  def clear_sqlvalue_function; end

  sig { void }
  def clear_stats_elem; end

  sig { void }
  def clear_string; end

  sig { void }
  def clear_sub_link; end

  sig { void }
  def clear_sub_plan; end

  sig { void }
  def clear_subscripting_ref; end

  sig { void }
  def clear_table_func; end

  sig { void }
  def clear_table_like_clause; end

  sig { void }
  def clear_table_sample_clause; end

  sig { void }
  def clear_target_entry; end

  sig { void }
  def clear_transaction_stmt; end

  sig { void }
  def clear_trigger_transition; end

  sig { void }
  def clear_truncate_stmt; end

  sig { void }
  def clear_type_cast; end

  sig { void }
  def clear_type_name; end

  sig { void }
  def clear_unlisten_stmt; end

  sig { void }
  def clear_update_stmt; end

  sig { void }
  def clear_vacuum_relation; end

  sig { void }
  def clear_vacuum_stmt; end

  sig { void }
  def clear_var; end

  sig { void }
  def clear_variable_set_stmt; end

  sig { void }
  def clear_variable_show_stmt; end

  sig { void }
  def clear_view_stmt; end

  sig { void }
  def clear_window_clause; end

  sig { void }
  def clear_window_def; end

  sig { void }
  def clear_window_func; end

  sig { void }
  def clear_window_func_run_condition; end

  sig { void }
  def clear_with_check_option; end

  sig { void }
  def clear_with_clause; end

  sig { void }
  def clear_xml_expr; end

  sig { void }
  def clear_xml_serialize; end

  sig { returns(T.nilable(PgQuery::ClosePortalStmt)) }
  def close_portal_stmt; end

  sig { params(value: T.nilable(PgQuery::ClosePortalStmt)).void }
  def close_portal_stmt=(value); end

  sig { returns(T.nilable(PgQuery::ClusterStmt)) }
  def cluster_stmt; end

  sig { params(value: T.nilable(PgQuery::ClusterStmt)).void }
  def cluster_stmt=(value); end

  sig { returns(T.nilable(PgQuery::CoalesceExpr)) }
  def coalesce_expr; end

  sig { params(value: T.nilable(PgQuery::CoalesceExpr)).void }
  def coalesce_expr=(value); end

  sig { returns(T.nilable(PgQuery::CoerceToDomain)) }
  def coerce_to_domain; end

  sig { params(value: T.nilable(PgQuery::CoerceToDomain)).void }
  def coerce_to_domain=(value); end

  sig { returns(T.nilable(PgQuery::CoerceToDomainValue)) }
  def coerce_to_domain_value; end

  sig { params(value: T.nilable(PgQuery::CoerceToDomainValue)).void }
  def coerce_to_domain_value=(value); end

  sig { returns(T.nilable(PgQuery::CoerceViaIO)) }
  def coerce_via_io; end

  sig { params(value: T.nilable(PgQuery::CoerceViaIO)).void }
  def coerce_via_io=(value); end

  sig { returns(T.nilable(PgQuery::CollateClause)) }
  def collate_clause; end

  sig { params(value: T.nilable(PgQuery::CollateClause)).void }
  def collate_clause=(value); end

  sig { returns(T.nilable(PgQuery::CollateExpr)) }
  def collate_expr; end

  sig { params(value: T.nilable(PgQuery::CollateExpr)).void }
  def collate_expr=(value); end

  sig { returns(T.nilable(PgQuery::ColumnDef)) }
  def column_def; end

  sig { params(value: T.nilable(PgQuery::ColumnDef)).void }
  def column_def=(value); end

  sig { returns(T.nilable(PgQuery::ColumnRef)) }
  def column_ref; end

  sig { params(value: T.nilable(PgQuery::ColumnRef)).void }
  def column_ref=(value); end

  sig { returns(T.nilable(PgQuery::CommentStmt)) }
  def comment_stmt; end

  sig { params(value: T.nilable(PgQuery::CommentStmt)).void }
  def comment_stmt=(value); end

  sig { returns(T.nilable(PgQuery::CommonTableExpr)) }
  def common_table_expr; end

  sig { params(value: T.nilable(PgQuery::CommonTableExpr)).void }
  def common_table_expr=(value); end

  sig { returns(T.nilable(PgQuery::CompositeTypeStmt)) }
  def composite_type_stmt; end

  sig { params(value: T.nilable(PgQuery::CompositeTypeStmt)).void }
  def composite_type_stmt=(value); end

  sig { returns(T.nilable(PgQuery::Constraint)) }
  def constraint; end

  sig { params(value: T.nilable(PgQuery::Constraint)).void }
  def constraint=(value); end

  sig { returns(T.nilable(PgQuery::ConstraintsSetStmt)) }
  def constraints_set_stmt; end

  sig { params(value: T.nilable(PgQuery::ConstraintsSetStmt)).void }
  def constraints_set_stmt=(value); end

  sig { returns(T.nilable(PgQuery::ConvertRowtypeExpr)) }
  def convert_rowtype_expr; end

  sig { params(value: T.nilable(PgQuery::ConvertRowtypeExpr)).void }
  def convert_rowtype_expr=(value); end

  sig { returns(T.nilable(PgQuery::CopyStmt)) }
  def copy_stmt; end

  sig { params(value: T.nilable(PgQuery::CopyStmt)).void }
  def copy_stmt=(value); end

  sig { returns(T.nilable(PgQuery::CreateAmStmt)) }
  def create_am_stmt; end

  sig { params(value: T.nilable(PgQuery::CreateAmStmt)).void }
  def create_am_stmt=(value); end

  sig { returns(T.nilable(PgQuery::CreateCastStmt)) }
  def create_cast_stmt; end

  sig { params(value: T.nilable(PgQuery::CreateCastStmt)).void }
  def create_cast_stmt=(value); end

  sig { returns(T.nilable(PgQuery::CreateConversionStmt)) }
  def create_conversion_stmt; end

  sig { params(value: T.nilable(PgQuery::CreateConversionStmt)).void }
  def create_conversion_stmt=(value); end

  sig { returns(T.nilable(PgQuery::CreateDomainStmt)) }
  def create_domain_stmt; end

  sig { params(value: T.nilable(PgQuery::CreateDomainStmt)).void }
  def create_domain_stmt=(value); end

  sig { returns(T.nilable(PgQuery::CreateEnumStmt)) }
  def create_enum_stmt; end

  sig { params(value: T.nilable(PgQuery::CreateEnumStmt)).void }
  def create_enum_stmt=(value); end

  sig { returns(T.nilable(PgQuery::CreateEventTrigStmt)) }
  def create_event_trig_stmt; end

  sig { params(value: T.nilable(PgQuery::CreateEventTrigStmt)).void }
  def create_event_trig_stmt=(value); end

  sig { returns(T.nilable(PgQuery::CreateExtensionStmt)) }
  def create_extension_stmt; end

  sig { params(value: T.nilable(PgQuery::CreateExtensionStmt)).void }
  def create_extension_stmt=(value); end

  sig { returns(T.nilable(PgQuery::CreateFdwStmt)) }
  def create_fdw_stmt; end

  sig { params(value: T.nilable(PgQuery::CreateFdwStmt)).void }
  def create_fdw_stmt=(value); end

  sig { returns(T.nilable(PgQuery::CreateForeignServerStmt)) }
  def create_foreign_server_stmt; end

  sig { params(value: T.nilable(PgQuery::CreateForeignServerStmt)).void }
  def create_foreign_server_stmt=(value); end

  sig { returns(T.nilable(PgQuery::CreateForeignTableStmt)) }
  def create_foreign_table_stmt; end

  sig { params(value: T.nilable(PgQuery::CreateForeignTableStmt)).void }
  def create_foreign_table_stmt=(value); end

  sig { returns(T.nilable(PgQuery::CreateFunctionStmt)) }
  def create_function_stmt; end

  sig { params(value: T.nilable(PgQuery::CreateFunctionStmt)).void }
  def create_function_stmt=(value); end

  sig { returns(T.nilable(PgQuery::CreateOpClassItem)) }
  def create_op_class_item; end

  sig { params(value: T.nilable(PgQuery::CreateOpClassItem)).void }
  def create_op_class_item=(value); end

  sig { returns(T.nilable(PgQuery::CreateOpClassStmt)) }
  def create_op_class_stmt; end

  sig { params(value: T.nilable(PgQuery::CreateOpClassStmt)).void }
  def create_op_class_stmt=(value); end

  sig { returns(T.nilable(PgQuery::CreateOpFamilyStmt)) }
  def create_op_family_stmt; end

  sig { params(value: T.nilable(PgQuery::CreateOpFamilyStmt)).void }
  def create_op_family_stmt=(value); end

  sig { returns(T.nilable(PgQuery::CreatePLangStmt)) }
  def create_plang_stmt; end

  sig { params(value: T.nilable(PgQuery::CreatePLangStmt)).void }
  def create_plang_stmt=(value); end

  sig { returns(T.nilable(PgQuery::CreatePolicyStmt)) }
  def create_policy_stmt; end

  sig { params(value: T.nilable(PgQuery::CreatePolicyStmt)).void }
  def create_policy_stmt=(value); end

  sig { returns(T.nilable(PgQuery::CreatePublicationStmt)) }
  def create_publication_stmt; end

  sig { params(value: T.nilable(PgQuery::CreatePublicationStmt)).void }
  def create_publication_stmt=(value); end

  sig { returns(T.nilable(PgQuery::CreateRangeStmt)) }
  def create_range_stmt; end

  sig { params(value: T.nilable(PgQuery::CreateRangeStmt)).void }
  def create_range_stmt=(value); end

  sig { returns(T.nilable(PgQuery::CreateRoleStmt)) }
  def create_role_stmt; end

  sig { params(value: T.nilable(PgQuery::CreateRoleStmt)).void }
  def create_role_stmt=(value); end

  sig { returns(T.nilable(PgQuery::CreateSchemaStmt)) }
  def create_schema_stmt; end

  sig { params(value: T.nilable(PgQuery::CreateSchemaStmt)).void }
  def create_schema_stmt=(value); end

  sig { returns(T.nilable(PgQuery::CreateSeqStmt)) }
  def create_seq_stmt; end

  sig { params(value: T.nilable(PgQuery::CreateSeqStmt)).void }
  def create_seq_stmt=(value); end

  sig { returns(T.nilable(PgQuery::CreateStatsStmt)) }
  def create_stats_stmt; end

  sig { params(value: T.nilable(PgQuery::CreateStatsStmt)).void }
  def create_stats_stmt=(value); end

  sig { returns(T.nilable(PgQuery::CreateStmt)) }
  def create_stmt; end

  sig { params(value: T.nilable(PgQuery::CreateStmt)).void }
  def create_stmt=(value); end

  sig { returns(T.nilable(PgQuery::CreateSubscriptionStmt)) }
  def create_subscription_stmt; end

  sig { params(value: T.nilable(PgQuery::CreateSubscriptionStmt)).void }
  def create_subscription_stmt=(value); end

  sig { returns(T.nilable(PgQuery::CreateTableAsStmt)) }
  def create_table_as_stmt; end

  sig { params(value: T.nilable(PgQuery::CreateTableAsStmt)).void }
  def create_table_as_stmt=(value); end

  sig { returns(T.nilable(PgQuery::CreateTableSpaceStmt)) }
  def create_table_space_stmt; end

  sig { params(value: T.nilable(PgQuery::CreateTableSpaceStmt)).void }
  def create_table_space_stmt=(value); end

  sig { returns(T.nilable(PgQuery::CreateTransformStmt)) }
  def create_transform_stmt; end

  sig { params(value: T.nilable(PgQuery::CreateTransformStmt)).void }
  def create_transform_stmt=(value); end

  sig { returns(T.nilable(PgQuery::CreateTrigStmt)) }
  def create_trig_stmt; end

  sig { params(value: T.nilable(PgQuery::CreateTrigStmt)).void }
  def create_trig_stmt=(value); end

  sig { returns(T.nilable(PgQuery::CreateUserMappingStmt)) }
  def create_user_mapping_stmt; end

  sig { params(value: T.nilable(PgQuery::CreateUserMappingStmt)).void }
  def create_user_mapping_stmt=(value); end

  sig { returns(T.nilable(PgQuery::CreatedbStmt)) }
  def createdb_stmt; end

  sig { params(value: T.nilable(PgQuery::CreatedbStmt)).void }
  def createdb_stmt=(value); end

  sig { returns(T.nilable(PgQuery::CTECycleClause)) }
  def ctecycle_clause; end

  sig { params(value: T.nilable(PgQuery::CTECycleClause)).void }
  def ctecycle_clause=(value); end

  sig { returns(T.nilable(PgQuery::CTESearchClause)) }
  def ctesearch_clause; end

  sig { params(value: T.nilable(PgQuery::CTESearchClause)).void }
  def ctesearch_clause=(value); end

  sig { returns(T.nilable(PgQuery::CurrentOfExpr)) }
  def current_of_expr; end

  sig { params(value: T.nilable(PgQuery::CurrentOfExpr)).void }
  def current_of_expr=(value); end

  sig { returns(T.nilable(PgQuery::DeallocateStmt)) }
  def deallocate_stmt; end

  sig { params(value: T.nilable(PgQuery::DeallocateStmt)).void }
  def deallocate_stmt=(value); end

  sig { returns(T.nilable(PgQuery::DeclareCursorStmt)) }
  def declare_cursor_stmt; end

  sig { params(value: T.nilable(PgQuery::DeclareCursorStmt)).void }
  def declare_cursor_stmt=(value); end

  sig { returns(T.nilable(PgQuery::DefElem)) }
  def def_elem; end

  sig { params(value: T.nilable(PgQuery::DefElem)).void }
  def def_elem=(value); end

  sig { returns(T.nilable(PgQuery::DefineStmt)) }
  def define_stmt; end

  sig { params(value: T.nilable(PgQuery::DefineStmt)).void }
  def define_stmt=(value); end

  sig { returns(T.nilable(PgQuery::DeleteStmt)) }
  def delete_stmt; end

  sig { params(value: T.nilable(PgQuery::DeleteStmt)).void }
  def delete_stmt=(value); end

  sig { returns(T.nilable(PgQuery::DiscardStmt)) }
  def discard_stmt; end

  sig { params(value: T.nilable(PgQuery::DiscardStmt)).void }
  def discard_stmt=(value); end

  sig { returns(T.nilable(PgQuery::DistinctExpr)) }
  def distinct_expr; end

  sig { params(value: T.nilable(PgQuery::DistinctExpr)).void }
  def distinct_expr=(value); end

  sig { returns(T.nilable(PgQuery::DoStmt)) }
  def do_stmt; end

  sig { params(value: T.nilable(PgQuery::DoStmt)).void }
  def do_stmt=(value); end

  sig { returns(T.nilable(PgQuery::DropOwnedStmt)) }
  def drop_owned_stmt; end

  sig { params(value: T.nilable(PgQuery::DropOwnedStmt)).void }
  def drop_owned_stmt=(value); end

  sig { returns(T.nilable(PgQuery::DropRoleStmt)) }
  def drop_role_stmt; end

  sig { params(value: T.nilable(PgQuery::DropRoleStmt)).void }
  def drop_role_stmt=(value); end

  sig { returns(T.nilable(PgQuery::DropStmt)) }
  def drop_stmt; end

  sig { params(value: T.nilable(PgQuery::DropStmt)).void }
  def drop_stmt=(value); end

  sig { returns(T.nilable(PgQuery::DropSubscriptionStmt)) }
  def drop_subscription_stmt; end

  sig { params(value: T.nilable(PgQuery::DropSubscriptionStmt)).void }
  def drop_subscription_stmt=(value); end

  sig { returns(T.nilable(PgQuery::DropTableSpaceStmt)) }
  def drop_table_space_stmt; end

  sig { params(value: T.nilable(PgQuery::DropTableSpaceStmt)).void }
  def drop_table_space_stmt=(value); end

  sig { returns(T.nilable(PgQuery::DropUserMappingStmt)) }
  def drop_user_mapping_stmt; end

  sig { params(value: T.nilable(PgQuery::DropUserMappingStmt)).void }
  def drop_user_mapping_stmt=(value); end

  sig { returns(T.nilable(PgQuery::DropdbStmt)) }
  def dropdb_stmt; end

  sig { params(value: T.nilable(PgQuery::DropdbStmt)).void }
  def dropdb_stmt=(value); end

  sig { returns(T.nilable(PgQuery::ExecuteStmt)) }
  def execute_stmt; end

  sig { params(value: T.nilable(PgQuery::ExecuteStmt)).void }
  def execute_stmt=(value); end

  sig { returns(T.nilable(PgQuery::ExplainStmt)) }
  def explain_stmt; end

  sig { params(value: T.nilable(PgQuery::ExplainStmt)).void }
  def explain_stmt=(value); end

  sig { returns(T.nilable(PgQuery::FetchStmt)) }
  def fetch_stmt; end

  sig { params(value: T.nilable(PgQuery::FetchStmt)).void }
  def fetch_stmt=(value); end

  sig { returns(T.nilable(PgQuery::FieldSelect)) }
  def field_select; end

  sig { params(value: T.nilable(PgQuery::FieldSelect)).void }
  def field_select=(value); end

  sig { returns(T.nilable(PgQuery::FieldStore)) }
  def field_store; end

  sig { params(value: T.nilable(PgQuery::FieldStore)).void }
  def field_store=(value); end

  sig { returns(T.nilable(PgQuery::Float)) }
  def float; end

  sig { params(value: T.nilable(PgQuery::Float)).void }
  def float=(value); end

  sig { returns(T.nilable(PgQuery::FromExpr)) }
  def from_expr; end

  sig { params(value: T.nilable(PgQuery::FromExpr)).void }
  def from_expr=(value); end

  sig { returns(T.nilable(PgQuery::FuncCall)) }
  def func_call; end

  sig { params(value: T.nilable(PgQuery::FuncCall)).void }
  def func_call=(value); end

  sig { returns(T.nilable(PgQuery::FuncExpr)) }
  def func_expr; end

  sig { params(value: T.nilable(PgQuery::FuncExpr)).void }
  def func_expr=(value); end

  sig { returns(T.nilable(PgQuery::FunctionParameter)) }
  def function_parameter; end

  sig { params(value: T.nilable(PgQuery::FunctionParameter)).void }
  def function_parameter=(value); end

  sig { returns(T.nilable(PgQuery::GrantRoleStmt)) }
  def grant_role_stmt; end

  sig { params(value: T.nilable(PgQuery::GrantRoleStmt)).void }
  def grant_role_stmt=(value); end

  sig { returns(T.nilable(PgQuery::GrantStmt)) }
  def grant_stmt; end

  sig { params(value: T.nilable(PgQuery::GrantStmt)).void }
  def grant_stmt=(value); end

  sig { returns(T.nilable(PgQuery::GroupingFunc)) }
  def grouping_func; end

  sig { params(value: T.nilable(PgQuery::GroupingFunc)).void }
  def grouping_func=(value); end

  sig { returns(T.nilable(PgQuery::GroupingSet)) }
  def grouping_set; end

  sig { params(value: T.nilable(PgQuery::GroupingSet)).void }
  def grouping_set=(value); end

  sig { returns(Object) }
  def has_a_array_expr?; end

  sig { returns(Object) }
  def has_a_const?; end

  sig { returns(Object) }
  def has_a_expr?; end

  sig { returns(Object) }
  def has_a_indices?; end

  sig { returns(Object) }
  def has_a_indirection?; end

  sig { returns(Object) }
  def has_a_star?; end

  sig { returns(Object) }
  def has_access_priv?; end

  sig { returns(Object) }
  def has_aggref?; end

  sig { returns(Object) }
  def has_alias?; end

  sig { returns(Object) }
  def has_alter_collation_stmt?; end

  sig { returns(Object) }
  def has_alter_database_refresh_coll_stmt?; end

  sig { returns(Object) }
  def has_alter_database_set_stmt?; end

  sig { returns(Object) }
  def has_alter_database_stmt?; end

  sig { returns(Object) }
  def has_alter_default_privileges_stmt?; end

  sig { returns(Object) }
  def has_alter_domain_stmt?; end

  sig { returns(Object) }
  def has_alter_enum_stmt?; end

  sig { returns(Object) }
  def has_alter_event_trig_stmt?; end

  sig { returns(Object) }
  def has_alter_extension_contents_stmt?; end

  sig { returns(Object) }
  def has_alter_extension_stmt?; end

  sig { returns(Object) }
  def has_alter_fdw_stmt?; end

  sig { returns(Object) }
  def has_alter_foreign_server_stmt?; end

  sig { returns(Object) }
  def has_alter_function_stmt?; end

  sig { returns(Object) }
  def has_alter_object_depends_stmt?; end

  sig { returns(Object) }
  def has_alter_object_schema_stmt?; end

  sig { returns(Object) }
  def has_alter_op_family_stmt?; end

  sig { returns(Object) }
  def has_alter_operator_stmt?; end

  sig { returns(Object) }
  def has_alter_owner_stmt?; end

  sig { returns(Object) }
  def has_alter_policy_stmt?; end

  sig { returns(Object) }
  def has_alter_publication_stmt?; end

  sig { returns(Object) }
  def has_alter_role_set_stmt?; end

  sig { returns(Object) }
  def has_alter_role_stmt?; end

  sig { returns(Object) }
  def has_alter_seq_stmt?; end

  sig { returns(Object) }
  def has_alter_stats_stmt?; end

  sig { returns(Object) }
  def has_alter_subscription_stmt?; end

  sig { returns(Object) }
  def has_alter_system_stmt?; end

  sig { returns(Object) }
  def has_alter_table_cmd?; end

  sig { returns(Object) }
  def has_alter_table_move_all_stmt?; end

  sig { returns(Object) }
  def has_alter_table_space_options_stmt?; end

  sig { returns(Object) }
  def has_alter_table_stmt?; end

  sig { returns(Object) }
  def has_alter_tsconfiguration_stmt?; end

  sig { returns(Object) }
  def has_alter_tsdictionary_stmt?; end

  sig { returns(Object) }
  def has_alter_type_stmt?; end

  sig { returns(Object) }
  def has_alter_user_mapping_stmt?; end

  sig { returns(Object) }
  def has_alternative_sub_plan?; end

  sig { returns(Object) }
  def has_array_coerce_expr?; end

  sig { returns(Object) }
  def has_array_expr?; end

  sig { returns(Object) }
  def has_bit_string?; end

  sig { returns(Object) }
  def has_bool_expr?; end

  sig { returns(Object) }
  def has_boolean?; end

  sig { returns(Object) }
  def has_boolean_test?; end

  sig { returns(Object) }
  def has_call_context?; end

  sig { returns(Object) }
  def has_call_stmt?; end

  sig { returns(Object) }
  def has_case_expr?; end

  sig { returns(Object) }
  def has_case_test_expr?; end

  sig { returns(Object) }
  def has_case_when?; end

  sig { returns(Object) }
  def has_check_point_stmt?; end

  sig { returns(Object) }
  def has_close_portal_stmt?; end

  sig { returns(Object) }
  def has_cluster_stmt?; end

  sig { returns(Object) }
  def has_coalesce_expr?; end

  sig { returns(Object) }
  def has_coerce_to_domain?; end

  sig { returns(Object) }
  def has_coerce_to_domain_value?; end

  sig { returns(Object) }
  def has_coerce_via_io?; end

  sig { returns(Object) }
  def has_collate_clause?; end

  sig { returns(Object) }
  def has_collate_expr?; end

  sig { returns(Object) }
  def has_column_def?; end

  sig { returns(Object) }
  def has_column_ref?; end

  sig { returns(Object) }
  def has_comment_stmt?; end

  sig { returns(Object) }
  def has_common_table_expr?; end

  sig { returns(Object) }
  def has_composite_type_stmt?; end

  sig { returns(Object) }
  def has_constraint?; end

  sig { returns(Object) }
  def has_constraints_set_stmt?; end

  sig { returns(Object) }
  def has_convert_rowtype_expr?; end

  sig { returns(Object) }
  def has_copy_stmt?; end

  sig { returns(Object) }
  def has_create_am_stmt?; end

  sig { returns(Object) }
  def has_create_cast_stmt?; end

  sig { returns(Object) }
  def has_create_conversion_stmt?; end

  sig { returns(Object) }
  def has_create_domain_stmt?; end

  sig { returns(Object) }
  def has_create_enum_stmt?; end

  sig { returns(Object) }
  def has_create_event_trig_stmt?; end

  sig { returns(Object) }
  def has_create_extension_stmt?; end

  sig { returns(Object) }
  def has_create_fdw_stmt?; end

  sig { returns(Object) }
  def has_create_foreign_server_stmt?; end

  sig { returns(Object) }
  def has_create_foreign_table_stmt?; end

  sig { returns(Object) }
  def has_create_function_stmt?; end

  sig { returns(Object) }
  def has_create_op_class_item?; end

  sig { returns(Object) }
  def has_create_op_class_stmt?; end

  sig { returns(Object) }
  def has_create_op_family_stmt?; end

  sig { returns(Object) }
  def has_create_plang_stmt?; end

  sig { returns(Object) }
  def has_create_policy_stmt?; end

  sig { returns(Object) }
  def has_create_publication_stmt?; end

  sig { returns(Object) }
  def has_create_range_stmt?; end

  sig { returns(Object) }
  def has_create_role_stmt?; end

  sig { returns(Object) }
  def has_create_schema_stmt?; end

  sig { returns(Object) }
  def has_create_seq_stmt?; end

  sig { returns(Object) }
  def has_create_stats_stmt?; end

  sig { returns(Object) }
  def has_create_stmt?; end

  sig { returns(Object) }
  def has_create_subscription_stmt?; end

  sig { returns(Object) }
  def has_create_table_as_stmt?; end

  sig { returns(Object) }
  def has_create_table_space_stmt?; end

  sig { returns(Object) }
  def has_create_transform_stmt?; end

  sig { returns(Object) }
  def has_create_trig_stmt?; end

  sig { returns(Object) }
  def has_create_user_mapping_stmt?; end

  sig { returns(Object) }
  def has_createdb_stmt?; end

  sig { returns(Object) }
  def has_ctecycle_clause?; end

  sig { returns(Object) }
  def has_ctesearch_clause?; end

  sig { returns(Object) }
  def has_current_of_expr?; end

  sig { returns(Object) }
  def has_deallocate_stmt?; end

  sig { returns(Object) }
  def has_declare_cursor_stmt?; end

  sig { returns(Object) }
  def has_def_elem?; end

  sig { returns(Object) }
  def has_define_stmt?; end

  sig { returns(Object) }
  def has_delete_stmt?; end

  sig { returns(Object) }
  def has_discard_stmt?; end

  sig { returns(Object) }
  def has_distinct_expr?; end

  sig { returns(Object) }
  def has_do_stmt?; end

  sig { returns(Object) }
  def has_drop_owned_stmt?; end

  sig { returns(Object) }
  def has_drop_role_stmt?; end

  sig { returns(Object) }
  def has_drop_stmt?; end

  sig { returns(Object) }
  def has_drop_subscription_stmt?; end

  sig { returns(Object) }
  def has_drop_table_space_stmt?; end

  sig { returns(Object) }
  def has_drop_user_mapping_stmt?; end

  sig { returns(Object) }
  def has_dropdb_stmt?; end

  sig { returns(Object) }
  def has_execute_stmt?; end

  sig { returns(Object) }
  def has_explain_stmt?; end

  sig { returns(Object) }
  def has_fetch_stmt?; end

  sig { returns(Object) }
  def has_field_select?; end

  sig { returns(Object) }
  def has_field_store?; end

  sig { returns(Object) }
  def has_float?; end

  sig { returns(Object) }
  def has_from_expr?; end

  sig { returns(Object) }
  def has_func_call?; end

  sig { returns(Object) }
  def has_func_expr?; end

  sig { returns(Object) }
  def has_function_parameter?; end

  sig { returns(Object) }
  def has_grant_role_stmt?; end

  sig { returns(Object) }
  def has_grant_stmt?; end

  sig { returns(Object) }
  def has_grouping_func?; end

  sig { returns(Object) }
  def has_grouping_set?; end

  sig { returns(Object) }
  def has_import_foreign_schema_stmt?; end

  sig { returns(Object) }
  def has_index_elem?; end

  sig { returns(Object) }
  def has_index_stmt?; end

  sig { returns(Object) }
  def has_infer_clause?; end

  sig { returns(Object) }
  def has_inference_elem?; end

  sig { returns(Object) }
  def has_inline_code_block?; end

  sig { returns(Object) }
  def has_insert_stmt?; end

  sig { returns(Object) }
  def has_int_list?; end

  sig { returns(Object) }
  def has_integer?; end

  sig { returns(Object) }
  def has_into_clause?; end

  sig { returns(Object) }
  def has_join_expr?; end

  sig { returns(Object) }
  def has_json_agg_constructor?; end

  sig { returns(Object) }
  def has_json_argument?; end

  sig { returns(Object) }
  def has_json_array_agg?; end

  sig { returns(Object) }
  def has_json_array_constructor?; end

  sig { returns(Object) }
  def has_json_array_query_constructor?; end

  sig { returns(Object) }
  def has_json_behavior?; end

  sig { returns(Object) }
  def has_json_constructor_expr?; end

  sig { returns(Object) }
  def has_json_expr?; end

  sig { returns(Object) }
  def has_json_format?; end

  sig { returns(Object) }
  def has_json_func_expr?; end

  sig { returns(Object) }
  def has_json_is_predicate?; end

  sig { returns(Object) }
  def has_json_key_value?; end

  sig { returns(Object) }
  def has_json_object_agg?; end

  sig { returns(Object) }
  def has_json_object_constructor?; end

  sig { returns(Object) }
  def has_json_output?; end

  sig { returns(Object) }
  def has_json_parse_expr?; end

  sig { returns(Object) }
  def has_json_returning?; end

  sig { returns(Object) }
  def has_json_scalar_expr?; end

  sig { returns(Object) }
  def has_json_serialize_expr?; end

  sig { returns(Object) }
  def has_json_table?; end

  sig { returns(Object) }
  def has_json_table_column?; end

  sig { returns(Object) }
  def has_json_table_path?; end

  sig { returns(Object) }
  def has_json_table_path_scan?; end

  sig { returns(Object) }
  def has_json_table_path_spec?; end

  sig { returns(Object) }
  def has_json_table_sibling_join?; end

  sig { returns(Object) }
  def has_json_value_expr?; end

  sig { returns(Object) }
  def has_list?; end

  sig { returns(Object) }
  def has_listen_stmt?; end

  sig { returns(Object) }
  def has_load_stmt?; end

  sig { returns(Object) }
  def has_lock_stmt?; end

  sig { returns(Object) }
  def has_locking_clause?; end

  sig { returns(Object) }
  def has_merge_action?; end

  sig { returns(Object) }
  def has_merge_stmt?; end

  sig { returns(Object) }
  def has_merge_support_func?; end

  sig { returns(Object) }
  def has_merge_when_clause?; end

  sig { returns(Object) }
  def has_min_max_expr?; end

  sig { returns(Object) }
  def has_multi_assign_ref?; end

  sig { returns(Object) }
  def has_named_arg_expr?; end

  sig { returns(Object) }
  def has_next_value_expr?; end

  sig { returns(Object) }
  def has_notify_stmt?; end

  sig { returns(Object) }
  def has_null_if_expr?; end

  sig { returns(Object) }
  def has_null_test?; end

  sig { returns(Object) }
  def has_object_with_args?; end

  sig { returns(Object) }
  def has_oid_list?; end

  sig { returns(Object) }
  def has_on_conflict_clause?; end

  sig { returns(Object) }
  def has_on_conflict_expr?; end

  sig { returns(Object) }
  def has_op_expr?; end

  sig { returns(Object) }
  def has_param?; end

  sig { returns(Object) }
  def has_param_ref?; end

  sig { returns(Object) }
  def has_partition_bound_spec?; end

  sig { returns(Object) }
  def has_partition_cmd?; end

  sig { returns(Object) }
  def has_partition_elem?; end

  sig { returns(Object) }
  def has_partition_range_datum?; end

  sig { returns(Object) }
  def has_partition_spec?; end

  sig { returns(Object) }
  def has_plassign_stmt?; end

  sig { returns(Object) }
  def has_prepare_stmt?; end

  sig { returns(Object) }
  def has_publication_obj_spec?; end

  sig { returns(Object) }
  def has_publication_table?; end

  sig { returns(Object) }
  def has_query?; end

  sig { returns(Object) }
  def has_range_function?; end

  sig { returns(Object) }
  def has_range_subselect?; end

  sig { returns(Object) }
  def has_range_table_func?; end

  sig { returns(Object) }
  def has_range_table_func_col?; end

  sig { returns(Object) }
  def has_range_table_sample?; end

  sig { returns(Object) }
  def has_range_tbl_entry?; end

  sig { returns(Object) }
  def has_range_tbl_function?; end

  sig { returns(Object) }
  def has_range_tbl_ref?; end

  sig { returns(Object) }
  def has_range_var?; end

  sig { returns(Object) }
  def has_raw_stmt?; end

  sig { returns(Object) }
  def has_reassign_owned_stmt?; end

  sig { returns(Object) }
  def has_refresh_mat_view_stmt?; end

  sig { returns(Object) }
  def has_reindex_stmt?; end

  sig { returns(Object) }
  def has_relabel_type?; end

  sig { returns(Object) }
  def has_rename_stmt?; end

  sig { returns(Object) }
  def has_replica_identity_stmt?; end

  sig { returns(Object) }
  def has_res_target?; end

  sig { returns(Object) }
  def has_return_stmt?; end

  sig { returns(Object) }
  def has_role_spec?; end

  sig { returns(Object) }
  def has_row_compare_expr?; end

  sig { returns(Object) }
  def has_row_expr?; end

  sig { returns(Object) }
  def has_row_mark_clause?; end

  sig { returns(Object) }
  def has_rtepermission_info?; end

  sig { returns(Object) }
  def has_rule_stmt?; end

  sig { returns(Object) }
  def has_scalar_array_op_expr?; end

  sig { returns(Object) }
  def has_sec_label_stmt?; end

  sig { returns(Object) }
  def has_select_stmt?; end

  sig { returns(Object) }
  def has_set_operation_stmt?; end

  sig { returns(Object) }
  def has_set_to_default?; end

  sig { returns(Object) }
  def has_single_partition_spec?; end

  sig { returns(Object) }
  def has_sort_by?; end

  sig { returns(Object) }
  def has_sort_group_clause?; end

  sig { returns(Object) }
  def has_sqlvalue_function?; end

  sig { returns(Object) }
  def has_stats_elem?; end

  sig { returns(Object) }
  def has_string?; end

  sig { returns(Object) }
  def has_sub_link?; end

  sig { returns(Object) }
  def has_sub_plan?; end

  sig { returns(Object) }
  def has_subscripting_ref?; end

  sig { returns(Object) }
  def has_table_func?; end

  sig { returns(Object) }
  def has_table_like_clause?; end

  sig { returns(Object) }
  def has_table_sample_clause?; end

  sig { returns(Object) }
  def has_target_entry?; end

  sig { returns(Object) }
  def has_transaction_stmt?; end

  sig { returns(Object) }
  def has_trigger_transition?; end

  sig { returns(Object) }
  def has_truncate_stmt?; end

  sig { returns(Object) }
  def has_type_cast?; end

  sig { returns(Object) }
  def has_type_name?; end

  sig { returns(Object) }
  def has_unlisten_stmt?; end

  sig { returns(Object) }
  def has_update_stmt?; end

  sig { returns(Object) }
  def has_vacuum_relation?; end

  sig { returns(Object) }
  def has_vacuum_stmt?; end

  sig { returns(Object) }
  def has_var?; end

  sig { returns(Object) }
  def has_variable_set_stmt?; end

  sig { returns(Object) }
  def has_variable_show_stmt?; end

  sig { returns(Object) }
  def has_view_stmt?; end

  sig { returns(Object) }
  def has_window_clause?; end

  sig { returns(Object) }
  def has_window_def?; end

  sig { returns(Object) }
  def has_window_func?; end

  sig { returns(Object) }
  def has_window_func_run_condition?; end

  sig { returns(Object) }
  def has_with_check_option?; end

  sig { returns(Object) }
  def has_with_clause?; end

  sig { returns(Object) }
  def has_xml_expr?; end

  sig { returns(Object) }
  def has_xml_serialize?; end

  sig { returns(T.nilable(PgQuery::ImportForeignSchemaStmt)) }
  def import_foreign_schema_stmt; end

  sig { params(value: T.nilable(PgQuery::ImportForeignSchemaStmt)).void }
  def import_foreign_schema_stmt=(value); end

  sig { returns(T.nilable(PgQuery::IndexElem)) }
  def index_elem; end

  sig { params(value: T.nilable(PgQuery::IndexElem)).void }
  def index_elem=(value); end

  sig { returns(T.nilable(PgQuery::IndexStmt)) }
  def index_stmt; end

  sig { params(value: T.nilable(PgQuery::IndexStmt)).void }
  def index_stmt=(value); end

  sig { returns(T.nilable(PgQuery::InferClause)) }
  def infer_clause; end

  sig { params(value: T.nilable(PgQuery::InferClause)).void }
  def infer_clause=(value); end

  sig { returns(T.nilable(PgQuery::InferenceElem)) }
  def inference_elem; end

  sig { params(value: T.nilable(PgQuery::InferenceElem)).void }
  def inference_elem=(value); end

  sig { returns(T.nilable(PgQuery::InlineCodeBlock)) }
  def inline_code_block; end

  sig { params(value: T.nilable(PgQuery::InlineCodeBlock)).void }
  def inline_code_block=(value); end

  sig { returns(T.nilable(PgQuery::InsertStmt)) }
  def insert_stmt; end

  sig { params(value: T.nilable(PgQuery::InsertStmt)).void }
  def insert_stmt=(value); end

  sig { returns(T.nilable(PgQuery::IntList)) }
  def int_list; end

  sig { params(value: T.nilable(PgQuery::IntList)).void }
  def int_list=(value); end

  sig { returns(T.nilable(PgQuery::Integer)) }
  def integer; end

  sig { params(value: T.nilable(PgQuery::Integer)).void }
  def integer=(value); end

  sig { returns(T.nilable(PgQuery::IntoClause)) }
  def into_clause; end

  sig { params(value: T.nilable(PgQuery::IntoClause)).void }
  def into_clause=(value); end

  sig { returns(T.nilable(PgQuery::JoinExpr)) }
  def join_expr; end

  sig { params(value: T.nilable(PgQuery::JoinExpr)).void }
  def join_expr=(value); end

  sig { returns(T.nilable(PgQuery::JsonAggConstructor)) }
  def json_agg_constructor; end

  sig { params(value: T.nilable(PgQuery::JsonAggConstructor)).void }
  def json_agg_constructor=(value); end

  sig { returns(T.nilable(PgQuery::JsonArgument)) }
  def json_argument; end

  sig { params(value: T.nilable(PgQuery::JsonArgument)).void }
  def json_argument=(value); end

  sig { returns(T.nilable(PgQuery::JsonArrayAgg)) }
  def json_array_agg; end

  sig { params(value: T.nilable(PgQuery::JsonArrayAgg)).void }
  def json_array_agg=(value); end

  sig { returns(T.nilable(PgQuery::JsonArrayConstructor)) }
  def json_array_constructor; end

  sig { params(value: T.nilable(PgQuery::JsonArrayConstructor)).void }
  def json_array_constructor=(value); end

  sig { returns(T.nilable(PgQuery::JsonArrayQueryConstructor)) }
  def json_array_query_constructor; end

  sig { params(value: T.nilable(PgQuery::JsonArrayQueryConstructor)).void }
  def json_array_query_constructor=(value); end

  sig { returns(T.nilable(PgQuery::JsonBehavior)) }
  def json_behavior; end

  sig { params(value: T.nilable(PgQuery::JsonBehavior)).void }
  def json_behavior=(value); end

  sig { returns(T.nilable(PgQuery::JsonConstructorExpr)) }
  def json_constructor_expr; end

  sig { params(value: T.nilable(PgQuery::JsonConstructorExpr)).void }
  def json_constructor_expr=(value); end

  sig { returns(T.nilable(PgQuery::JsonExpr)) }
  def json_expr; end

  sig { params(value: T.nilable(PgQuery::JsonExpr)).void }
  def json_expr=(value); end

  sig { returns(T.nilable(PgQuery::JsonFormat)) }
  def json_format; end

  sig { params(value: T.nilable(PgQuery::JsonFormat)).void }
  def json_format=(value); end

  sig { returns(T.nilable(PgQuery::JsonFuncExpr)) }
  def json_func_expr; end

  sig { params(value: T.nilable(PgQuery::JsonFuncExpr)).void }
  def json_func_expr=(value); end

  sig { returns(T.nilable(PgQuery::JsonIsPredicate)) }
  def json_is_predicate; end

  sig { params(value: T.nilable(PgQuery::JsonIsPredicate)).void }
  def json_is_predicate=(value); end

  sig { returns(T.nilable(PgQuery::JsonKeyValue)) }
  def json_key_value; end

  sig { params(value: T.nilable(PgQuery::JsonKeyValue)).void }
  def json_key_value=(value); end

  sig { returns(T.nilable(PgQuery::JsonObjectAgg)) }
  def json_object_agg; end

  sig { params(value: T.nilable(PgQuery::JsonObjectAgg)).void }
  def json_object_agg=(value); end

  sig { returns(T.nilable(PgQuery::JsonObjectConstructor)) }
  def json_object_constructor; end

  sig { params(value: T.nilable(PgQuery::JsonObjectConstructor)).void }
  def json_object_constructor=(value); end

  sig { returns(T.nilable(PgQuery::JsonOutput)) }
  def json_output; end

  sig { params(value: T.nilable(PgQuery::JsonOutput)).void }
  def json_output=(value); end

  sig { returns(T.nilable(PgQuery::JsonParseExpr)) }
  def json_parse_expr; end

  sig { params(value: T.nilable(PgQuery::JsonParseExpr)).void }
  def json_parse_expr=(value); end

  sig { returns(T.nilable(PgQuery::JsonReturning)) }
  def json_returning; end

  sig { params(value: T.nilable(PgQuery::JsonReturning)).void }
  def json_returning=(value); end

  sig { returns(T.nilable(PgQuery::JsonScalarExpr)) }
  def json_scalar_expr; end

  sig { params(value: T.nilable(PgQuery::JsonScalarExpr)).void }
  def json_scalar_expr=(value); end

  sig { returns(T.nilable(PgQuery::JsonSerializeExpr)) }
  def json_serialize_expr; end

  sig { params(value: T.nilable(PgQuery::JsonSerializeExpr)).void }
  def json_serialize_expr=(value); end

  sig { returns(T.nilable(PgQuery::JsonTable)) }
  def json_table; end

  sig { params(value: T.nilable(PgQuery::JsonTable)).void }
  def json_table=(value); end

  sig { returns(T.nilable(PgQuery::JsonTableColumn)) }
  def json_table_column; end

  sig { params(value: T.nilable(PgQuery::JsonTableColumn)).void }
  def json_table_column=(value); end

  sig { returns(T.nilable(PgQuery::JsonTablePath)) }
  def json_table_path; end

  sig { params(value: T.nilable(PgQuery::JsonTablePath)).void }
  def json_table_path=(value); end

  sig { returns(T.nilable(PgQuery::JsonTablePathScan)) }
  def json_table_path_scan; end

  sig { params(value: T.nilable(PgQuery::JsonTablePathScan)).void }
  def json_table_path_scan=(value); end

  sig { returns(T.nilable(PgQuery::JsonTablePathSpec)) }
  def json_table_path_spec; end

  sig { params(value: T.nilable(PgQuery::JsonTablePathSpec)).void }
  def json_table_path_spec=(value); end

  sig { returns(T.nilable(PgQuery::JsonTableSiblingJoin)) }
  def json_table_sibling_join; end

  sig { params(value: T.nilable(PgQuery::JsonTableSiblingJoin)).void }
  def json_table_sibling_join=(value); end

  sig { returns(T.nilable(PgQuery::JsonValueExpr)) }
  def json_value_expr; end

  sig { params(value: T.nilable(PgQuery::JsonValueExpr)).void }
  def json_value_expr=(value); end

  sig { returns(T.nilable(PgQuery::List)) }
  def list; end

  sig { params(value: T.nilable(PgQuery::List)).void }
  def list=(value); end

  sig { returns(T.nilable(PgQuery::ListenStmt)) }
  def listen_stmt; end

  sig { params(value: T.nilable(PgQuery::ListenStmt)).void }
  def listen_stmt=(value); end

  sig { returns(T.nilable(PgQuery::LoadStmt)) }
  def load_stmt; end

  sig { params(value: T.nilable(PgQuery::LoadStmt)).void }
  def load_stmt=(value); end

  sig { returns(T.nilable(PgQuery::LockStmt)) }
  def lock_stmt; end

  sig { params(value: T.nilable(PgQuery::LockStmt)).void }
  def lock_stmt=(value); end

  sig { returns(T.nilable(PgQuery::LockingClause)) }
  def locking_clause; end

  sig { params(value: T.nilable(PgQuery::LockingClause)).void }
  def locking_clause=(value); end

  sig { returns(T.nilable(PgQuery::MergeAction)) }
  def merge_action; end

  sig { params(value: T.nilable(PgQuery::MergeAction)).void }
  def merge_action=(value); end

  sig { returns(T.nilable(PgQuery::MergeStmt)) }
  def merge_stmt; end

  sig { params(value: T.nilable(PgQuery::MergeStmt)).void }
  def merge_stmt=(value); end

  sig { returns(T.nilable(PgQuery::MergeSupportFunc)) }
  def merge_support_func; end

  sig { params(value: T.nilable(PgQuery::MergeSupportFunc)).void }
  def merge_support_func=(value); end

  sig { returns(T.nilable(PgQuery::MergeWhenClause)) }
  def merge_when_clause; end

  sig { params(value: T.nilable(PgQuery::MergeWhenClause)).void }
  def merge_when_clause=(value); end

  sig { returns(T.nilable(PgQuery::MinMaxExpr)) }
  def min_max_expr; end

  sig { params(value: T.nilable(PgQuery::MinMaxExpr)).void }
  def min_max_expr=(value); end

  sig { returns(T.nilable(PgQuery::MultiAssignRef)) }
  def multi_assign_ref; end

  sig { params(value: T.nilable(PgQuery::MultiAssignRef)).void }
  def multi_assign_ref=(value); end

  sig { returns(T.nilable(PgQuery::NamedArgExpr)) }
  def named_arg_expr; end

  sig { params(value: T.nilable(PgQuery::NamedArgExpr)).void }
  def named_arg_expr=(value); end

  sig { returns(T.nilable(PgQuery::NextValueExpr)) }
  def next_value_expr; end

  sig { params(value: T.nilable(PgQuery::NextValueExpr)).void }
  def next_value_expr=(value); end

  sig { returns(T.nilable(Symbol)) }
  def node; end

  sig { returns(T.nilable(PgQuery::NotifyStmt)) }
  def notify_stmt; end

  sig { params(value: T.nilable(PgQuery::NotifyStmt)).void }
  def notify_stmt=(value); end

  sig { returns(T.nilable(PgQuery::NullIfExpr)) }
  def null_if_expr; end

  sig { params(value: T.nilable(PgQuery::NullIfExpr)).void }
  def null_if_expr=(value); end

  sig { returns(T.nilable(PgQuery::NullTest)) }
  def null_test; end

  sig { params(value: T.nilable(PgQuery::NullTest)).void }
  def null_test=(value); end

  sig { returns(T.nilable(PgQuery::ObjectWithArgs)) }
  def object_with_args; end

  sig { params(value: T.nilable(PgQuery::ObjectWithArgs)).void }
  def object_with_args=(value); end

  sig { returns(T.nilable(PgQuery::OidList)) }
  def oid_list; end

  sig { params(value: T.nilable(PgQuery::OidList)).void }
  def oid_list=(value); end

  sig { returns(T.nilable(PgQuery::OnConflictClause)) }
  def on_conflict_clause; end

  sig { params(value: T.nilable(PgQuery::OnConflictClause)).void }
  def on_conflict_clause=(value); end

  sig { returns(T.nilable(PgQuery::OnConflictExpr)) }
  def on_conflict_expr; end

  sig { params(value: T.nilable(PgQuery::OnConflictExpr)).void }
  def on_conflict_expr=(value); end

  sig { returns(T.nilable(PgQuery::OpExpr)) }
  def op_expr; end

  sig { params(value: T.nilable(PgQuery::OpExpr)).void }
  def op_expr=(value); end

  sig { returns(T.nilable(PgQuery::Param)) }
  def param; end

  sig { params(value: T.nilable(PgQuery::Param)).void }
  def param=(value); end

  sig { returns(T.nilable(PgQuery::ParamRef)) }
  def param_ref; end

  sig { params(value: T.nilable(PgQuery::ParamRef)).void }
  def param_ref=(value); end

  sig { returns(T.nilable(PgQuery::PartitionBoundSpec)) }
  def partition_bound_spec; end

  sig { params(value: T.nilable(PgQuery::PartitionBoundSpec)).void }
  def partition_bound_spec=(value); end

  sig { returns(T.nilable(PgQuery::PartitionCmd)) }
  def partition_cmd; end

  sig { params(value: T.nilable(PgQuery::PartitionCmd)).void }
  def partition_cmd=(value); end

  sig { returns(T.nilable(PgQuery::PartitionElem)) }
  def partition_elem; end

  sig { params(value: T.nilable(PgQuery::PartitionElem)).void }
  def partition_elem=(value); end

  sig { returns(T.nilable(PgQuery::PartitionRangeDatum)) }
  def partition_range_datum; end

  sig { params(value: T.nilable(PgQuery::PartitionRangeDatum)).void }
  def partition_range_datum=(value); end

  sig { returns(T.nilable(PgQuery::PartitionSpec)) }
  def partition_spec; end

  sig { params(value: T.nilable(PgQuery::PartitionSpec)).void }
  def partition_spec=(value); end

  sig { returns(T.nilable(PgQuery::PLAssignStmt)) }
  def plassign_stmt; end

  sig { params(value: T.nilable(PgQuery::PLAssignStmt)).void }
  def plassign_stmt=(value); end

  sig { returns(T.nilable(PgQuery::PrepareStmt)) }
  def prepare_stmt; end

  sig { params(value: T.nilable(PgQuery::PrepareStmt)).void }
  def prepare_stmt=(value); end

  sig { returns(T.nilable(PgQuery::PublicationObjSpec)) }
  def publication_obj_spec; end

  sig { params(value: T.nilable(PgQuery::PublicationObjSpec)).void }
  def publication_obj_spec=(value); end

  sig { returns(T.nilable(PgQuery::PublicationTable)) }
  def publication_table; end

  sig { params(value: T.nilable(PgQuery::PublicationTable)).void }
  def publication_table=(value); end

  sig { returns(T.nilable(PgQuery::Query)) }
  def query; end

  sig { params(value: T.nilable(PgQuery::Query)).void }
  def query=(value); end

  sig { returns(T.nilable(PgQuery::RangeFunction)) }
  def range_function; end

  sig { params(value: T.nilable(PgQuery::RangeFunction)).void }
  def range_function=(value); end

  sig { returns(T.nilable(PgQuery::RangeSubselect)) }
  def range_subselect; end

  sig { params(value: T.nilable(PgQuery::RangeSubselect)).void }
  def range_subselect=(value); end

  sig { returns(T.nilable(PgQuery::RangeTableFunc)) }
  def range_table_func; end

  sig { params(value: T.nilable(PgQuery::RangeTableFunc)).void }
  def range_table_func=(value); end

  sig { returns(T.nilable(PgQuery::RangeTableFuncCol)) }
  def range_table_func_col; end

  sig { params(value: T.nilable(PgQuery::RangeTableFuncCol)).void }
  def range_table_func_col=(value); end

  sig { returns(T.nilable(PgQuery::RangeTableSample)) }
  def range_table_sample; end

  sig { params(value: T.nilable(PgQuery::RangeTableSample)).void }
  def range_table_sample=(value); end

  sig { returns(T.nilable(PgQuery::RangeTblEntry)) }
  def range_tbl_entry; end

  sig { params(value: T.nilable(PgQuery::RangeTblEntry)).void }
  def range_tbl_entry=(value); end

  sig { returns(T.nilable(PgQuery::RangeTblFunction)) }
  def range_tbl_function; end

  sig { params(value: T.nilable(PgQuery::RangeTblFunction)).void }
  def range_tbl_function=(value); end

  sig { returns(T.nilable(PgQuery::RangeTblRef)) }
  def range_tbl_ref; end

  sig { params(value: T.nilable(PgQuery::RangeTblRef)).void }
  def range_tbl_ref=(value); end

  sig { returns(T.nilable(PgQuery::RangeVar)) }
  def range_var; end

  sig { params(value: T.nilable(PgQuery::RangeVar)).void }
  def range_var=(value); end

  sig { returns(T.nilable(PgQuery::RawStmt)) }
  def raw_stmt; end

  sig { params(value: T.nilable(PgQuery::RawStmt)).void }
  def raw_stmt=(value); end

  sig { returns(T.nilable(PgQuery::ReassignOwnedStmt)) }
  def reassign_owned_stmt; end

  sig { params(value: T.nilable(PgQuery::ReassignOwnedStmt)).void }
  def reassign_owned_stmt=(value); end

  sig { returns(T.nilable(PgQuery::RefreshMatViewStmt)) }
  def refresh_mat_view_stmt; end

  sig { params(value: T.nilable(PgQuery::RefreshMatViewStmt)).void }
  def refresh_mat_view_stmt=(value); end

  sig { returns(T.nilable(PgQuery::ReindexStmt)) }
  def reindex_stmt; end

  sig { params(value: T.nilable(PgQuery::ReindexStmt)).void }
  def reindex_stmt=(value); end

  sig { returns(T.nilable(PgQuery::RelabelType)) }
  def relabel_type; end

  sig { params(value: T.nilable(PgQuery::RelabelType)).void }
  def relabel_type=(value); end

  sig { returns(T.nilable(PgQuery::RenameStmt)) }
  def rename_stmt; end

  sig { params(value: T.nilable(PgQuery::RenameStmt)).void }
  def rename_stmt=(value); end

  sig { returns(T.nilable(PgQuery::ReplicaIdentityStmt)) }
  def replica_identity_stmt; end

  sig { params(value: T.nilable(PgQuery::ReplicaIdentityStmt)).void }
  def replica_identity_stmt=(value); end

  sig { returns(T.nilable(PgQuery::ResTarget)) }
  def res_target; end

  sig { params(value: T.nilable(PgQuery::ResTarget)).void }
  def res_target=(value); end

  sig { returns(T.nilable(PgQuery::ReturnStmt)) }
  def return_stmt; end

  sig { params(value: T.nilable(PgQuery::ReturnStmt)).void }
  def return_stmt=(value); end

  sig { returns(T.nilable(PgQuery::RoleSpec)) }
  def role_spec; end

  sig { params(value: T.nilable(PgQuery::RoleSpec)).void }
  def role_spec=(value); end

  sig { returns(T.nilable(PgQuery::RowCompareExpr)) }
  def row_compare_expr; end

  sig { params(value: T.nilable(PgQuery::RowCompareExpr)).void }
  def row_compare_expr=(value); end

  sig { returns(T.nilable(PgQuery::RowExpr)) }
  def row_expr; end

  sig { params(value: T.nilable(PgQuery::RowExpr)).void }
  def row_expr=(value); end

  sig { returns(T.nilable(PgQuery::RowMarkClause)) }
  def row_mark_clause; end

  sig { params(value: T.nilable(PgQuery::RowMarkClause)).void }
  def row_mark_clause=(value); end

  sig { returns(T.nilable(PgQuery::RTEPermissionInfo)) }
  def rtepermission_info; end

  sig { params(value: T.nilable(PgQuery::RTEPermissionInfo)).void }
  def rtepermission_info=(value); end

  sig { returns(T.nilable(PgQuery::RuleStmt)) }
  def rule_stmt; end

  sig { params(value: T.nilable(PgQuery::RuleStmt)).void }
  def rule_stmt=(value); end

  sig { returns(T.nilable(PgQuery::ScalarArrayOpExpr)) }
  def scalar_array_op_expr; end

  sig { params(value: T.nilable(PgQuery::ScalarArrayOpExpr)).void }
  def scalar_array_op_expr=(value); end

  sig { returns(T.nilable(PgQuery::SecLabelStmt)) }
  def sec_label_stmt; end

  sig { params(value: T.nilable(PgQuery::SecLabelStmt)).void }
  def sec_label_stmt=(value); end

  sig { returns(T.nilable(PgQuery::SelectStmt)) }
  def select_stmt; end

  sig { params(value: T.nilable(PgQuery::SelectStmt)).void }
  def select_stmt=(value); end

  sig { returns(T.nilable(PgQuery::SetOperationStmt)) }
  def set_operation_stmt; end

  sig { params(value: T.nilable(PgQuery::SetOperationStmt)).void }
  def set_operation_stmt=(value); end

  sig { returns(T.nilable(PgQuery::SetToDefault)) }
  def set_to_default; end

  sig { params(value: T.nilable(PgQuery::SetToDefault)).void }
  def set_to_default=(value); end

  sig { returns(T.nilable(PgQuery::SinglePartitionSpec)) }
  def single_partition_spec; end

  sig { params(value: T.nilable(PgQuery::SinglePartitionSpec)).void }
  def single_partition_spec=(value); end

  sig { returns(T.nilable(PgQuery::SortBy)) }
  def sort_by; end

  sig { params(value: T.nilable(PgQuery::SortBy)).void }
  def sort_by=(value); end

  sig { returns(T.nilable(PgQuery::SortGroupClause)) }
  def sort_group_clause; end

  sig { params(value: T.nilable(PgQuery::SortGroupClause)).void }
  def sort_group_clause=(value); end

  sig { returns(T.nilable(PgQuery::SQLValueFunction)) }
  def sqlvalue_function; end

  sig { params(value: T.nilable(PgQuery::SQLValueFunction)).void }
  def sqlvalue_function=(value); end

  sig { returns(T.nilable(PgQuery::StatsElem)) }
  def stats_elem; end

  sig { params(value: T.nilable(PgQuery::StatsElem)).void }
  def stats_elem=(value); end

  sig { returns(T.nilable(PgQuery::String)) }
  def string; end

  sig { params(value: T.nilable(PgQuery::String)).void }
  def string=(value); end

  sig { returns(T.nilable(PgQuery::SubLink)) }
  def sub_link; end

  sig { params(value: T.nilable(PgQuery::SubLink)).void }
  def sub_link=(value); end

  sig { returns(T.nilable(PgQuery::SubPlan)) }
  def sub_plan; end

  sig { params(value: T.nilable(PgQuery::SubPlan)).void }
  def sub_plan=(value); end

  sig { returns(T.nilable(PgQuery::SubscriptingRef)) }
  def subscripting_ref; end

  sig { params(value: T.nilable(PgQuery::SubscriptingRef)).void }
  def subscripting_ref=(value); end

  sig { returns(T.nilable(PgQuery::TableFunc)) }
  def table_func; end

  sig { params(value: T.nilable(PgQuery::TableFunc)).void }
  def table_func=(value); end

  sig { returns(T.nilable(PgQuery::TableLikeClause)) }
  def table_like_clause; end

  sig { params(value: T.nilable(PgQuery::TableLikeClause)).void }
  def table_like_clause=(value); end

  sig { returns(T.nilable(PgQuery::TableSampleClause)) }
  def table_sample_clause; end

  sig { params(value: T.nilable(PgQuery::TableSampleClause)).void }
  def table_sample_clause=(value); end

  sig { returns(T.nilable(PgQuery::TargetEntry)) }
  def target_entry; end

  sig { params(value: T.nilable(PgQuery::TargetEntry)).void }
  def target_entry=(value); end

  sig { returns(T.nilable(PgQuery::TransactionStmt)) }
  def transaction_stmt; end

  sig { params(value: T.nilable(PgQuery::TransactionStmt)).void }
  def transaction_stmt=(value); end

  sig { returns(T.nilable(PgQuery::TriggerTransition)) }
  def trigger_transition; end

  sig { params(value: T.nilable(PgQuery::TriggerTransition)).void }
  def trigger_transition=(value); end

  sig { returns(T.nilable(PgQuery::TruncateStmt)) }
  def truncate_stmt; end

  sig { params(value: T.nilable(PgQuery::TruncateStmt)).void }
  def truncate_stmt=(value); end

  sig { returns(T.nilable(PgQuery::TypeCast)) }
  def type_cast; end

  sig { params(value: T.nilable(PgQuery::TypeCast)).void }
  def type_cast=(value); end

  sig { returns(T.nilable(PgQuery::TypeName)) }
  def type_name; end

  sig { params(value: T.nilable(PgQuery::TypeName)).void }
  def type_name=(value); end

  sig { returns(T.nilable(PgQuery::UnlistenStmt)) }
  def unlisten_stmt; end

  sig { params(value: T.nilable(PgQuery::UnlistenStmt)).void }
  def unlisten_stmt=(value); end

  sig { returns(T.nilable(PgQuery::UpdateStmt)) }
  def update_stmt; end

  sig { params(value: T.nilable(PgQuery::UpdateStmt)).void }
  def update_stmt=(value); end

  sig { returns(T.nilable(PgQuery::VacuumRelation)) }
  def vacuum_relation; end

  sig { params(value: T.nilable(PgQuery::VacuumRelation)).void }
  def vacuum_relation=(value); end

  sig { returns(T.nilable(PgQuery::VacuumStmt)) }
  def vacuum_stmt; end

  sig { params(value: T.nilable(PgQuery::VacuumStmt)).void }
  def vacuum_stmt=(value); end

  sig { returns(T.nilable(PgQuery::Var)) }
  def var; end

  sig { params(value: T.nilable(PgQuery::Var)).void }
  def var=(value); end

  sig { returns(T.nilable(PgQuery::VariableSetStmt)) }
  def variable_set_stmt; end

  sig { params(value: T.nilable(PgQuery::VariableSetStmt)).void }
  def variable_set_stmt=(value); end

  sig { returns(T.nilable(PgQuery::VariableShowStmt)) }
  def variable_show_stmt; end

  sig { params(value: T.nilable(PgQuery::VariableShowStmt)).void }
  def variable_show_stmt=(value); end

  sig { returns(T.nilable(PgQuery::ViewStmt)) }
  def view_stmt; end

  sig { params(value: T.nilable(PgQuery::ViewStmt)).void }
  def view_stmt=(value); end

  sig { returns(T.nilable(PgQuery::WindowClause)) }
  def window_clause; end

  sig { params(value: T.nilable(PgQuery::WindowClause)).void }
  def window_clause=(value); end

  sig { returns(T.nilable(PgQuery::WindowDef)) }
  def window_def; end

  sig { params(value: T.nilable(PgQuery::WindowDef)).void }
  def window_def=(value); end

  sig { returns(T.nilable(PgQuery::WindowFunc)) }
  def window_func; end

  sig { params(value: T.nilable(PgQuery::WindowFunc)).void }
  def window_func=(value); end

  sig { returns(T.nilable(PgQuery::WindowFuncRunCondition)) }
  def window_func_run_condition; end

  sig { params(value: T.nilable(PgQuery::WindowFuncRunCondition)).void }
  def window_func_run_condition=(value); end

  sig { returns(T.nilable(PgQuery::WithCheckOption)) }
  def with_check_option; end

  sig { params(value: T.nilable(PgQuery::WithCheckOption)).void }
  def with_check_option=(value); end

  sig { returns(T.nilable(PgQuery::WithClause)) }
  def with_clause; end

  sig { params(value: T.nilable(PgQuery::WithClause)).void }
  def with_clause=(value); end

  sig { returns(T.nilable(PgQuery::XmlExpr)) }
  def xml_expr; end

  sig { params(value: T.nilable(PgQuery::XmlExpr)).void }
  def xml_expr=(value); end

  sig { returns(T.nilable(PgQuery::XmlSerialize)) }
  def xml_serialize; end

  sig { params(value: T.nilable(PgQuery::XmlSerialize)).void }
  def xml_serialize=(value); end
end
