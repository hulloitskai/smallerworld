# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `PgQuery::CreateFunctionStmt`.
# Please instead update this file by running `bin/tapioca dsl PgQuery::CreateFunctionStmt`.


class PgQuery::CreateFunctionStmt < Google::Protobuf::AbstractMessage
  sig do
    params(
      funcname: T.nilable(T.any(Google::Protobuf::RepeatedField[PgQuery::Node], T::Array[PgQuery::Node])),
      is_procedure: T.nilable(T::Boolean),
      options: T.nilable(T.any(Google::Protobuf::RepeatedField[PgQuery::Node], T::Array[PgQuery::Node])),
      parameters: T.nilable(T.any(Google::Protobuf::RepeatedField[PgQuery::Node], T::Array[PgQuery::Node])),
      replace: T.nilable(T::Boolean),
      return_type: T.nilable(PgQuery::TypeName),
      sql_body: T.nilable(PgQuery::Node)
    ).void
  end
  def initialize(funcname: T.unsafe(nil), is_procedure: nil, options: T.unsafe(nil), parameters: T.unsafe(nil), replace: nil, return_type: nil, sql_body: nil); end

  sig { void }
  def clear_funcname; end

  sig { void }
  def clear_is_procedure; end

  sig { void }
  def clear_options; end

  sig { void }
  def clear_parameters; end

  sig { void }
  def clear_replace; end

  sig { void }
  def clear_return_type; end

  sig { void }
  def clear_sql_body; end

  sig { returns(Google::Protobuf::RepeatedField[PgQuery::Node]) }
  def funcname; end

  sig { params(value: Google::Protobuf::RepeatedField[PgQuery::Node]).void }
  def funcname=(value); end

  sig { returns(Object) }
  def has_return_type?; end

  sig { returns(Object) }
  def has_sql_body?; end

  sig { returns(T::Boolean) }
  def is_procedure; end

  sig { params(value: T::Boolean).void }
  def is_procedure=(value); end

  sig { returns(Google::Protobuf::RepeatedField[PgQuery::Node]) }
  def options; end

  sig { params(value: Google::Protobuf::RepeatedField[PgQuery::Node]).void }
  def options=(value); end

  sig { returns(Google::Protobuf::RepeatedField[PgQuery::Node]) }
  def parameters; end

  sig { params(value: Google::Protobuf::RepeatedField[PgQuery::Node]).void }
  def parameters=(value); end

  sig { returns(T::Boolean) }
  def replace; end

  sig { params(value: T::Boolean).void }
  def replace=(value); end

  sig { returns(T.nilable(PgQuery::TypeName)) }
  def return_type; end

  sig { params(value: T.nilable(PgQuery::TypeName)).void }
  def return_type=(value); end

  sig { returns(T.nilable(PgQuery::Node)) }
  def sql_body; end

  sig { params(value: T.nilable(PgQuery::Node)).void }
  def sql_body=(value); end
end
