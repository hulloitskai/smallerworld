# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `PgQuery::CTECycleClause`.
# Please instead update this file by running `bin/tapioca dsl PgQuery::CTECycleClause`.


class PgQuery::CTECycleClause < Google::Protobuf::AbstractMessage
  sig do
    params(
      cycle_col_list: T.nilable(T.any(Google::Protobuf::RepeatedField[PgQuery::Node], T::Array[PgQuery::Node])),
      cycle_mark_collation: T.nilable(Integer),
      cycle_mark_column: T.nilable(String),
      cycle_mark_default: T.nilable(PgQuery::Node),
      cycle_mark_neop: T.nilable(Integer),
      cycle_mark_type: T.nilable(Integer),
      cycle_mark_typmod: T.nilable(Integer),
      cycle_mark_value: T.nilable(PgQuery::Node),
      cycle_path_column: T.nilable(String),
      location: T.nilable(Integer)
    ).void
  end
  def initialize(cycle_col_list: T.unsafe(nil), cycle_mark_collation: nil, cycle_mark_column: nil, cycle_mark_default: nil, cycle_mark_neop: nil, cycle_mark_type: nil, cycle_mark_typmod: nil, cycle_mark_value: nil, cycle_path_column: nil, location: nil); end

  sig { void }
  def clear_cycle_col_list; end

  sig { void }
  def clear_cycle_mark_collation; end

  sig { void }
  def clear_cycle_mark_column; end

  sig { void }
  def clear_cycle_mark_default; end

  sig { void }
  def clear_cycle_mark_neop; end

  sig { void }
  def clear_cycle_mark_type; end

  sig { void }
  def clear_cycle_mark_typmod; end

  sig { void }
  def clear_cycle_mark_value; end

  sig { void }
  def clear_cycle_path_column; end

  sig { void }
  def clear_location; end

  sig { returns(Google::Protobuf::RepeatedField[PgQuery::Node]) }
  def cycle_col_list; end

  sig { params(value: Google::Protobuf::RepeatedField[PgQuery::Node]).void }
  def cycle_col_list=(value); end

  sig { returns(Integer) }
  def cycle_mark_collation; end

  sig { params(value: Integer).void }
  def cycle_mark_collation=(value); end

  sig { returns(String) }
  def cycle_mark_column; end

  sig { params(value: String).void }
  def cycle_mark_column=(value); end

  sig { returns(T.nilable(PgQuery::Node)) }
  def cycle_mark_default; end

  sig { params(value: T.nilable(PgQuery::Node)).void }
  def cycle_mark_default=(value); end

  sig { returns(Integer) }
  def cycle_mark_neop; end

  sig { params(value: Integer).void }
  def cycle_mark_neop=(value); end

  sig { returns(Integer) }
  def cycle_mark_type; end

  sig { params(value: Integer).void }
  def cycle_mark_type=(value); end

  sig { returns(Integer) }
  def cycle_mark_typmod; end

  sig { params(value: Integer).void }
  def cycle_mark_typmod=(value); end

  sig { returns(T.nilable(PgQuery::Node)) }
  def cycle_mark_value; end

  sig { params(value: T.nilable(PgQuery::Node)).void }
  def cycle_mark_value=(value); end

  sig { returns(String) }
  def cycle_path_column; end

  sig { params(value: String).void }
  def cycle_path_column=(value); end

  sig { returns(Object) }
  def has_cycle_mark_default?; end

  sig { returns(Object) }
  def has_cycle_mark_value?; end

  sig { returns(Integer) }
  def location; end

  sig { params(value: Integer).void }
  def location=(value); end
end
