# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `PgQuery::UpdateStmt`.
# Please instead update this file by running `bin/tapioca dsl PgQuery::UpdateStmt`.


class PgQuery::UpdateStmt < Google::Protobuf::AbstractMessage
  sig do
    params(
      from_clause: T.nilable(T.any(Google::Protobuf::RepeatedField[PgQuery::Node], T::Array[PgQuery::Node])),
      relation: T.nilable(PgQuery::RangeVar),
      returning_list: T.nilable(T.any(Google::Protobuf::RepeatedField[PgQuery::Node], T::Array[PgQuery::Node])),
      target_list: T.nilable(T.any(Google::Protobuf::RepeatedField[PgQuery::Node], T::Array[PgQuery::Node])),
      where_clause: T.nilable(PgQuery::Node),
      with_clause: T.nilable(PgQuery::WithClause)
    ).void
  end
  def initialize(from_clause: T.unsafe(nil), relation: nil, returning_list: T.unsafe(nil), target_list: T.unsafe(nil), where_clause: nil, with_clause: nil); end

  sig { void }
  def clear_from_clause; end

  sig { void }
  def clear_relation; end

  sig { void }
  def clear_returning_list; end

  sig { void }
  def clear_target_list; end

  sig { void }
  def clear_where_clause; end

  sig { void }
  def clear_with_clause; end

  sig { returns(Google::Protobuf::RepeatedField[PgQuery::Node]) }
  def from_clause; end

  sig { params(value: Google::Protobuf::RepeatedField[PgQuery::Node]).void }
  def from_clause=(value); end

  sig { returns(Object) }
  def has_relation?; end

  sig { returns(Object) }
  def has_where_clause?; end

  sig { returns(Object) }
  def has_with_clause?; end

  sig { returns(T.nilable(PgQuery::RangeVar)) }
  def relation; end

  sig { params(value: T.nilable(PgQuery::RangeVar)).void }
  def relation=(value); end

  sig { returns(Google::Protobuf::RepeatedField[PgQuery::Node]) }
  def returning_list; end

  sig { params(value: Google::Protobuf::RepeatedField[PgQuery::Node]).void }
  def returning_list=(value); end

  sig { returns(Google::Protobuf::RepeatedField[PgQuery::Node]) }
  def target_list; end

  sig { params(value: Google::Protobuf::RepeatedField[PgQuery::Node]).void }
  def target_list=(value); end

  sig { returns(T.nilable(PgQuery::Node)) }
  def where_clause; end

  sig { params(value: T.nilable(PgQuery::Node)).void }
  def where_clause=(value); end

  sig { returns(T.nilable(PgQuery::WithClause)) }
  def with_clause; end

  sig { params(value: T.nilable(PgQuery::WithClause)).void }
  def with_clause=(value); end
end
