# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `PgQuery::TargetEntry`.
# Please instead update this file by running `bin/tapioca dsl PgQuery::TargetEntry`.


class PgQuery::TargetEntry < Google::Protobuf::AbstractMessage
  sig do
    params(
      expr: T.nilable(PgQuery::Node),
      resjunk: T.nilable(T::Boolean),
      resname: T.nilable(String),
      resno: T.nilable(Integer),
      resorigcol: T.nilable(Integer),
      resorigtbl: T.nilable(Integer),
      ressortgroupref: T.nilable(Integer),
      xpr: T.nilable(PgQuery::Node)
    ).void
  end
  def initialize(expr: nil, resjunk: nil, resname: nil, resno: nil, resorigcol: nil, resorigtbl: nil, ressortgroupref: nil, xpr: nil); end

  sig { void }
  def clear_expr; end

  sig { void }
  def clear_resjunk; end

  sig { void }
  def clear_resname; end

  sig { void }
  def clear_resno; end

  sig { void }
  def clear_resorigcol; end

  sig { void }
  def clear_resorigtbl; end

  sig { void }
  def clear_ressortgroupref; end

  sig { void }
  def clear_xpr; end

  sig { returns(T.nilable(PgQuery::Node)) }
  def expr; end

  sig { params(value: T.nilable(PgQuery::Node)).void }
  def expr=(value); end

  sig { returns(Object) }
  def has_expr?; end

  sig { returns(Object) }
  def has_xpr?; end

  sig { returns(T::Boolean) }
  def resjunk; end

  sig { params(value: T::Boolean).void }
  def resjunk=(value); end

  sig { returns(String) }
  def resname; end

  sig { params(value: String).void }
  def resname=(value); end

  sig { returns(Integer) }
  def resno; end

  sig { params(value: Integer).void }
  def resno=(value); end

  sig { returns(Integer) }
  def resorigcol; end

  sig { params(value: Integer).void }
  def resorigcol=(value); end

  sig { returns(Integer) }
  def resorigtbl; end

  sig { params(value: Integer).void }
  def resorigtbl=(value); end

  sig { returns(Integer) }
  def ressortgroupref; end

  sig { params(value: Integer).void }
  def ressortgroupref=(value); end

  sig { returns(T.nilable(PgQuery::Node)) }
  def xpr; end

  sig { params(value: T.nilable(PgQuery::Node)).void }
  def xpr=(value); end
end
