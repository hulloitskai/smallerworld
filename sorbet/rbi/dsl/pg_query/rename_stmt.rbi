# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `PgQuery::RenameStmt`.
# Please instead update this file by running `bin/tapioca dsl PgQuery::RenameStmt`.


class PgQuery::RenameStmt < Google::Protobuf::AbstractMessage
  sig do
    params(
      behavior: T.nilable(T.any(Symbol, Integer)),
      missing_ok: T.nilable(T::Boolean),
      newname: T.nilable(String),
      object: T.nilable(PgQuery::Node),
      relation: T.nilable(PgQuery::RangeVar),
      relation_type: T.nilable(T.any(Symbol, Integer)),
      rename_type: T.nilable(T.any(Symbol, Integer)),
      subname: T.nilable(String)
    ).void
  end
  def initialize(behavior: nil, missing_ok: nil, newname: nil, object: nil, relation: nil, relation_type: nil, rename_type: nil, subname: nil); end

  sig { returns(T.any(Symbol, Integer)) }
  def behavior; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def behavior=(value); end

  sig { void }
  def clear_behavior; end

  sig { void }
  def clear_missing_ok; end

  sig { void }
  def clear_newname; end

  sig { void }
  def clear_object; end

  sig { void }
  def clear_relation; end

  sig { void }
  def clear_relation_type; end

  sig { void }
  def clear_rename_type; end

  sig { void }
  def clear_subname; end

  sig { returns(Object) }
  def has_object?; end

  sig { returns(Object) }
  def has_relation?; end

  sig { returns(T::Boolean) }
  def missing_ok; end

  sig { params(value: T::Boolean).void }
  def missing_ok=(value); end

  sig { returns(String) }
  def newname; end

  sig { params(value: String).void }
  def newname=(value); end

  sig { returns(T.nilable(PgQuery::Node)) }
  def object; end

  sig { params(value: T.nilable(PgQuery::Node)).void }
  def object=(value); end

  sig { returns(T.nilable(PgQuery::RangeVar)) }
  def relation; end

  sig { params(value: T.nilable(PgQuery::RangeVar)).void }
  def relation=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def relation_type; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def relation_type=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def rename_type; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def rename_type=(value); end

  sig { returns(String) }
  def subname; end

  sig { params(value: String).void }
  def subname=(value); end
end
