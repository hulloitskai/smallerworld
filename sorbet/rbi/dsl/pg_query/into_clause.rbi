# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `PgQuery::IntoClause`.
# Please instead update this file by running `bin/tapioca dsl PgQuery::IntoClause`.


class PgQuery::IntoClause < Google::Protobuf::AbstractMessage
  sig do
    params(
      access_method: T.nilable(String),
      col_names: T.nilable(T.any(Google::Protobuf::RepeatedField[PgQuery::Node], T::Array[PgQuery::Node])),
      on_commit: T.nilable(T.any(Symbol, Integer)),
      options: T.nilable(T.any(Google::Protobuf::RepeatedField[PgQuery::Node], T::Array[PgQuery::Node])),
      rel: T.nilable(PgQuery::RangeVar),
      skip_data: T.nilable(T::Boolean),
      table_space_name: T.nilable(String),
      view_query: T.nilable(PgQuery::Node)
    ).void
  end
  def initialize(access_method: nil, col_names: T.unsafe(nil), on_commit: nil, options: T.unsafe(nil), rel: nil, skip_data: nil, table_space_name: nil, view_query: nil); end

  sig { returns(String) }
  def access_method; end

  sig { params(value: String).void }
  def access_method=(value); end

  sig { void }
  def clear_access_method; end

  sig { void }
  def clear_col_names; end

  sig { void }
  def clear_on_commit; end

  sig { void }
  def clear_options; end

  sig { void }
  def clear_rel; end

  sig { void }
  def clear_skip_data; end

  sig { void }
  def clear_table_space_name; end

  sig { void }
  def clear_view_query; end

  sig { returns(Google::Protobuf::RepeatedField[PgQuery::Node]) }
  def col_names; end

  sig { params(value: Google::Protobuf::RepeatedField[PgQuery::Node]).void }
  def col_names=(value); end

  sig { returns(Object) }
  def has_rel?; end

  sig { returns(Object) }
  def has_view_query?; end

  sig { returns(T.any(Symbol, Integer)) }
  def on_commit; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def on_commit=(value); end

  sig { returns(Google::Protobuf::RepeatedField[PgQuery::Node]) }
  def options; end

  sig { params(value: Google::Protobuf::RepeatedField[PgQuery::Node]).void }
  def options=(value); end

  sig { returns(T.nilable(PgQuery::RangeVar)) }
  def rel; end

  sig { params(value: T.nilable(PgQuery::RangeVar)).void }
  def rel=(value); end

  sig { returns(T::Boolean) }
  def skip_data; end

  sig { params(value: T::Boolean).void }
  def skip_data=(value); end

  sig { returns(String) }
  def table_space_name; end

  sig { params(value: String).void }
  def table_space_name=(value); end

  sig { returns(T.nilable(PgQuery::Node)) }
  def view_query; end

  sig { params(value: T.nilable(PgQuery::Node)).void }
  def view_query=(value); end
end
