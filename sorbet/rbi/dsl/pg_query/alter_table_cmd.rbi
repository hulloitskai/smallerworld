# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `PgQuery::AlterTableCmd`.
# Please instead update this file by running `bin/tapioca dsl PgQuery::AlterTableCmd`.


class PgQuery::AlterTableCmd < Google::Protobuf::AbstractMessage
  sig do
    params(
      behavior: T.nilable(T.any(Symbol, Integer)),
      def: T.nilable(PgQuery::Node),
      missing_ok: T.nilable(T::Boolean),
      name: T.nilable(String),
      newowner: T.nilable(PgQuery::RoleSpec),
      num: T.nilable(Integer),
      recurse: T.nilable(T::Boolean),
      subtype: T.nilable(T.any(Symbol, Integer))
    ).void
  end
  def initialize(behavior: nil, def: nil, missing_ok: nil, name: nil, newowner: nil, num: nil, recurse: nil, subtype: nil); end

  sig { returns(T.any(Symbol, Integer)) }
  def behavior; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def behavior=(value); end

  sig { void }
  def clear_behavior; end

  sig { void }
  def clear_def; end

  sig { void }
  def clear_missing_ok; end

  sig { void }
  def clear_name; end

  sig { void }
  def clear_newowner; end

  sig { void }
  def clear_num; end

  sig { void }
  def clear_recurse; end

  sig { void }
  def clear_subtype; end

  sig { returns(T.nilable(PgQuery::Node)) }
  def def; end

  sig { params(value: T.nilable(PgQuery::Node)).void }
  def def=(value); end

  sig { returns(Object) }
  def has_def?; end

  sig { returns(Object) }
  def has_newowner?; end

  sig { returns(T::Boolean) }
  def missing_ok; end

  sig { params(value: T::Boolean).void }
  def missing_ok=(value); end

  sig { returns(String) }
  def name; end

  sig { params(value: String).void }
  def name=(value); end

  sig { returns(T.nilable(PgQuery::RoleSpec)) }
  def newowner; end

  sig { params(value: T.nilable(PgQuery::RoleSpec)).void }
  def newowner=(value); end

  sig { returns(Integer) }
  def num; end

  sig { params(value: Integer).void }
  def num=(value); end

  sig { returns(T::Boolean) }
  def recurse; end

  sig { params(value: T::Boolean).void }
  def recurse=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def subtype; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def subtype=(value); end
end
