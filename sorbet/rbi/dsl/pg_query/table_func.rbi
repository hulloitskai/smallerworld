# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `PgQuery::TableFunc`.
# Please instead update this file by running `bin/tapioca dsl PgQuery::TableFunc`.


class PgQuery::TableFunc < Google::Protobuf::AbstractMessage
  sig do
    params(
      colcollations: T.nilable(T.any(Google::Protobuf::RepeatedField[PgQuery::Node], T::Array[PgQuery::Node])),
      coldefexprs: T.nilable(T.any(Google::Protobuf::RepeatedField[PgQuery::Node], T::Array[PgQuery::Node])),
      colexprs: T.nilable(T.any(Google::Protobuf::RepeatedField[PgQuery::Node], T::Array[PgQuery::Node])),
      colnames: T.nilable(T.any(Google::Protobuf::RepeatedField[PgQuery::Node], T::Array[PgQuery::Node])),
      coltypes: T.nilable(T.any(Google::Protobuf::RepeatedField[PgQuery::Node], T::Array[PgQuery::Node])),
      coltypmods: T.nilable(T.any(Google::Protobuf::RepeatedField[PgQuery::Node], T::Array[PgQuery::Node])),
      colvalexprs: T.nilable(T.any(Google::Protobuf::RepeatedField[PgQuery::Node], T::Array[PgQuery::Node])),
      docexpr: T.nilable(PgQuery::Node),
      functype: T.nilable(T.any(Symbol, Integer)),
      location: T.nilable(Integer),
      notnulls: T.nilable(T.any(Google::Protobuf::RepeatedField[Integer], T::Array[Integer])),
      ns_names: T.nilable(T.any(Google::Protobuf::RepeatedField[PgQuery::Node], T::Array[PgQuery::Node])),
      ns_uris: T.nilable(T.any(Google::Protobuf::RepeatedField[PgQuery::Node], T::Array[PgQuery::Node])),
      ordinalitycol: T.nilable(Integer),
      passingvalexprs: T.nilable(T.any(Google::Protobuf::RepeatedField[PgQuery::Node], T::Array[PgQuery::Node])),
      plan: T.nilable(PgQuery::Node),
      rowexpr: T.nilable(PgQuery::Node)
    ).void
  end
  def initialize(colcollations: T.unsafe(nil), coldefexprs: T.unsafe(nil), colexprs: T.unsafe(nil), colnames: T.unsafe(nil), coltypes: T.unsafe(nil), coltypmods: T.unsafe(nil), colvalexprs: T.unsafe(nil), docexpr: nil, functype: nil, location: nil, notnulls: T.unsafe(nil), ns_names: T.unsafe(nil), ns_uris: T.unsafe(nil), ordinalitycol: nil, passingvalexprs: T.unsafe(nil), plan: nil, rowexpr: nil); end

  sig { void }
  def clear_colcollations; end

  sig { void }
  def clear_coldefexprs; end

  sig { void }
  def clear_colexprs; end

  sig { void }
  def clear_colnames; end

  sig { void }
  def clear_coltypes; end

  sig { void }
  def clear_coltypmods; end

  sig { void }
  def clear_colvalexprs; end

  sig { void }
  def clear_docexpr; end

  sig { void }
  def clear_functype; end

  sig { void }
  def clear_location; end

  sig { void }
  def clear_notnulls; end

  sig { void }
  def clear_ns_names; end

  sig { void }
  def clear_ns_uris; end

  sig { void }
  def clear_ordinalitycol; end

  sig { void }
  def clear_passingvalexprs; end

  sig { void }
  def clear_plan; end

  sig { void }
  def clear_rowexpr; end

  sig { returns(Google::Protobuf::RepeatedField[PgQuery::Node]) }
  def colcollations; end

  sig { params(value: Google::Protobuf::RepeatedField[PgQuery::Node]).void }
  def colcollations=(value); end

  sig { returns(Google::Protobuf::RepeatedField[PgQuery::Node]) }
  def coldefexprs; end

  sig { params(value: Google::Protobuf::RepeatedField[PgQuery::Node]).void }
  def coldefexprs=(value); end

  sig { returns(Google::Protobuf::RepeatedField[PgQuery::Node]) }
  def colexprs; end

  sig { params(value: Google::Protobuf::RepeatedField[PgQuery::Node]).void }
  def colexprs=(value); end

  sig { returns(Google::Protobuf::RepeatedField[PgQuery::Node]) }
  def colnames; end

  sig { params(value: Google::Protobuf::RepeatedField[PgQuery::Node]).void }
  def colnames=(value); end

  sig { returns(Google::Protobuf::RepeatedField[PgQuery::Node]) }
  def coltypes; end

  sig { params(value: Google::Protobuf::RepeatedField[PgQuery::Node]).void }
  def coltypes=(value); end

  sig { returns(Google::Protobuf::RepeatedField[PgQuery::Node]) }
  def coltypmods; end

  sig { params(value: Google::Protobuf::RepeatedField[PgQuery::Node]).void }
  def coltypmods=(value); end

  sig { returns(Google::Protobuf::RepeatedField[PgQuery::Node]) }
  def colvalexprs; end

  sig { params(value: Google::Protobuf::RepeatedField[PgQuery::Node]).void }
  def colvalexprs=(value); end

  sig { returns(T.nilable(PgQuery::Node)) }
  def docexpr; end

  sig { params(value: T.nilable(PgQuery::Node)).void }
  def docexpr=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def functype; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def functype=(value); end

  sig { returns(Object) }
  def has_docexpr?; end

  sig { returns(Object) }
  def has_plan?; end

  sig { returns(Object) }
  def has_rowexpr?; end

  sig { returns(Integer) }
  def location; end

  sig { params(value: Integer).void }
  def location=(value); end

  sig { returns(Google::Protobuf::RepeatedField[Integer]) }
  def notnulls; end

  sig { params(value: Google::Protobuf::RepeatedField[Integer]).void }
  def notnulls=(value); end

  sig { returns(Google::Protobuf::RepeatedField[PgQuery::Node]) }
  def ns_names; end

  sig { params(value: Google::Protobuf::RepeatedField[PgQuery::Node]).void }
  def ns_names=(value); end

  sig { returns(Google::Protobuf::RepeatedField[PgQuery::Node]) }
  def ns_uris; end

  sig { params(value: Google::Protobuf::RepeatedField[PgQuery::Node]).void }
  def ns_uris=(value); end

  sig { returns(Integer) }
  def ordinalitycol; end

  sig { params(value: Integer).void }
  def ordinalitycol=(value); end

  sig { returns(Google::Protobuf::RepeatedField[PgQuery::Node]) }
  def passingvalexprs; end

  sig { params(value: Google::Protobuf::RepeatedField[PgQuery::Node]).void }
  def passingvalexprs=(value); end

  sig { returns(T.nilable(PgQuery::Node)) }
  def plan; end

  sig { params(value: T.nilable(PgQuery::Node)).void }
  def plan=(value); end

  sig { returns(T.nilable(PgQuery::Node)) }
  def rowexpr; end

  sig { params(value: T.nilable(PgQuery::Node)).void }
  def rowexpr=(value); end
end
