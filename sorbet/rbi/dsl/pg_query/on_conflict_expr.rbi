# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `PgQuery::OnConflictExpr`.
# Please instead update this file by running `bin/tapioca dsl PgQuery::OnConflictExpr`.


class PgQuery::OnConflictExpr < Google::Protobuf::AbstractMessage
  sig do
    params(
      action: T.nilable(T.any(Symbol, Integer)),
      arbiter_elems: T.nilable(T.any(Google::Protobuf::RepeatedField[PgQuery::Node], T::Array[PgQuery::Node])),
      arbiter_where: T.nilable(PgQuery::Node),
      constraint: T.nilable(Integer),
      excl_rel_index: T.nilable(Integer),
      excl_rel_tlist: T.nilable(T.any(Google::Protobuf::RepeatedField[PgQuery::Node], T::Array[PgQuery::Node])),
      on_conflict_set: T.nilable(T.any(Google::Protobuf::RepeatedField[PgQuery::Node], T::Array[PgQuery::Node])),
      on_conflict_where: T.nilable(PgQuery::Node)
    ).void
  end
  def initialize(action: nil, arbiter_elems: T.unsafe(nil), arbiter_where: nil, constraint: nil, excl_rel_index: nil, excl_rel_tlist: T.unsafe(nil), on_conflict_set: T.unsafe(nil), on_conflict_where: nil); end

  sig { returns(T.any(Symbol, Integer)) }
  def action; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def action=(value); end

  sig { returns(Google::Protobuf::RepeatedField[PgQuery::Node]) }
  def arbiter_elems; end

  sig { params(value: Google::Protobuf::RepeatedField[PgQuery::Node]).void }
  def arbiter_elems=(value); end

  sig { returns(T.nilable(PgQuery::Node)) }
  def arbiter_where; end

  sig { params(value: T.nilable(PgQuery::Node)).void }
  def arbiter_where=(value); end

  sig { void }
  def clear_action; end

  sig { void }
  def clear_arbiter_elems; end

  sig { void }
  def clear_arbiter_where; end

  sig { void }
  def clear_constraint; end

  sig { void }
  def clear_excl_rel_index; end

  sig { void }
  def clear_excl_rel_tlist; end

  sig { void }
  def clear_on_conflict_set; end

  sig { void }
  def clear_on_conflict_where; end

  sig { returns(Integer) }
  def constraint; end

  sig { params(value: Integer).void }
  def constraint=(value); end

  sig { returns(Integer) }
  def excl_rel_index; end

  sig { params(value: Integer).void }
  def excl_rel_index=(value); end

  sig { returns(Google::Protobuf::RepeatedField[PgQuery::Node]) }
  def excl_rel_tlist; end

  sig { params(value: Google::Protobuf::RepeatedField[PgQuery::Node]).void }
  def excl_rel_tlist=(value); end

  sig { returns(Object) }
  def has_arbiter_where?; end

  sig { returns(Object) }
  def has_on_conflict_where?; end

  sig { returns(Google::Protobuf::RepeatedField[PgQuery::Node]) }
  def on_conflict_set; end

  sig { params(value: Google::Protobuf::RepeatedField[PgQuery::Node]).void }
  def on_conflict_set=(value); end

  sig { returns(T.nilable(PgQuery::Node)) }
  def on_conflict_where; end

  sig { params(value: T.nilable(PgQuery::Node)).void }
  def on_conflict_where=(value); end
end
