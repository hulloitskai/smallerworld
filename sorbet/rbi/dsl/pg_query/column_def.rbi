# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `PgQuery::ColumnDef`.
# Please instead update this file by running `bin/tapioca dsl PgQuery::ColumnDef`.


class PgQuery::ColumnDef < Google::Protobuf::AbstractMessage
  sig do
    params(
      coll_clause: T.nilable(PgQuery::CollateClause),
      coll_oid: T.nilable(Integer),
      colname: T.nilable(String),
      compression: T.nilable(String),
      constraints: T.nilable(T.any(Google::Protobuf::RepeatedField[PgQuery::Node], T::Array[PgQuery::Node])),
      cooked_default: T.nilable(PgQuery::Node),
      fdwoptions: T.nilable(T.any(Google::Protobuf::RepeatedField[PgQuery::Node], T::Array[PgQuery::Node])),
      generated: T.nilable(String),
      identity: T.nilable(String),
      identity_sequence: T.nilable(PgQuery::RangeVar),
      inhcount: T.nilable(Integer),
      is_from_type: T.nilable(T::Boolean),
      is_local: T.nilable(T::Boolean),
      is_not_null: T.nilable(T::Boolean),
      location: T.nilable(Integer),
      raw_default: T.nilable(PgQuery::Node),
      storage: T.nilable(String),
      storage_name: T.nilable(String),
      type_name: T.nilable(PgQuery::TypeName)
    ).void
  end
  def initialize(coll_clause: nil, coll_oid: nil, colname: nil, compression: nil, constraints: T.unsafe(nil), cooked_default: nil, fdwoptions: T.unsafe(nil), generated: nil, identity: nil, identity_sequence: nil, inhcount: nil, is_from_type: nil, is_local: nil, is_not_null: nil, location: nil, raw_default: nil, storage: nil, storage_name: nil, type_name: nil); end

  sig { void }
  def clear_coll_clause; end

  sig { void }
  def clear_coll_oid; end

  sig { void }
  def clear_colname; end

  sig { void }
  def clear_compression; end

  sig { void }
  def clear_constraints; end

  sig { void }
  def clear_cooked_default; end

  sig { void }
  def clear_fdwoptions; end

  sig { void }
  def clear_generated; end

  sig { void }
  def clear_identity; end

  sig { void }
  def clear_identity_sequence; end

  sig { void }
  def clear_inhcount; end

  sig { void }
  def clear_is_from_type; end

  sig { void }
  def clear_is_local; end

  sig { void }
  def clear_is_not_null; end

  sig { void }
  def clear_location; end

  sig { void }
  def clear_raw_default; end

  sig { void }
  def clear_storage; end

  sig { void }
  def clear_storage_name; end

  sig { void }
  def clear_type_name; end

  sig { returns(T.nilable(PgQuery::CollateClause)) }
  def coll_clause; end

  sig { params(value: T.nilable(PgQuery::CollateClause)).void }
  def coll_clause=(value); end

  sig { returns(Integer) }
  def coll_oid; end

  sig { params(value: Integer).void }
  def coll_oid=(value); end

  sig { returns(String) }
  def colname; end

  sig { params(value: String).void }
  def colname=(value); end

  sig { returns(String) }
  def compression; end

  sig { params(value: String).void }
  def compression=(value); end

  sig { returns(Google::Protobuf::RepeatedField[PgQuery::Node]) }
  def constraints; end

  sig { params(value: Google::Protobuf::RepeatedField[PgQuery::Node]).void }
  def constraints=(value); end

  sig { returns(T.nilable(PgQuery::Node)) }
  def cooked_default; end

  sig { params(value: T.nilable(PgQuery::Node)).void }
  def cooked_default=(value); end

  sig { returns(Google::Protobuf::RepeatedField[PgQuery::Node]) }
  def fdwoptions; end

  sig { params(value: Google::Protobuf::RepeatedField[PgQuery::Node]).void }
  def fdwoptions=(value); end

  sig { returns(String) }
  def generated; end

  sig { params(value: String).void }
  def generated=(value); end

  sig { returns(Object) }
  def has_coll_clause?; end

  sig { returns(Object) }
  def has_cooked_default?; end

  sig { returns(Object) }
  def has_identity_sequence?; end

  sig { returns(Object) }
  def has_raw_default?; end

  sig { returns(Object) }
  def has_type_name?; end

  sig { returns(String) }
  def identity; end

  sig { params(value: String).void }
  def identity=(value); end

  sig { returns(T.nilable(PgQuery::RangeVar)) }
  def identity_sequence; end

  sig { params(value: T.nilable(PgQuery::RangeVar)).void }
  def identity_sequence=(value); end

  sig { returns(Integer) }
  def inhcount; end

  sig { params(value: Integer).void }
  def inhcount=(value); end

  sig { returns(T::Boolean) }
  def is_from_type; end

  sig { params(value: T::Boolean).void }
  def is_from_type=(value); end

  sig { returns(T::Boolean) }
  def is_local; end

  sig { params(value: T::Boolean).void }
  def is_local=(value); end

  sig { returns(T::Boolean) }
  def is_not_null; end

  sig { params(value: T::Boolean).void }
  def is_not_null=(value); end

  sig { returns(Integer) }
  def location; end

  sig { params(value: Integer).void }
  def location=(value); end

  sig { returns(T.nilable(PgQuery::Node)) }
  def raw_default; end

  sig { params(value: T.nilable(PgQuery::Node)).void }
  def raw_default=(value); end

  sig { returns(String) }
  def storage; end

  sig { params(value: String).void }
  def storage=(value); end

  sig { returns(String) }
  def storage_name; end

  sig { params(value: String).void }
  def storage_name=(value); end

  sig { returns(T.nilable(PgQuery::TypeName)) }
  def type_name; end

  sig { params(value: T.nilable(PgQuery::TypeName)).void }
  def type_name=(value); end
end
