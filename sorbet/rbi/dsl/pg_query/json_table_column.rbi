# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `PgQuery::JsonTableColumn`.
# Please instead update this file by running `bin/tapioca dsl PgQuery::JsonTableColumn`.


class PgQuery::JsonTableColumn < Google::Protobuf::AbstractMessage
  sig do
    params(
      coltype: T.nilable(T.any(Symbol, Integer)),
      columns: T.nilable(T.any(Google::Protobuf::RepeatedField[PgQuery::Node], T::Array[PgQuery::Node])),
      format: T.nilable(PgQuery::JsonFormat),
      location: T.nilable(Integer),
      name: T.nilable(String),
      on_empty: T.nilable(PgQuery::JsonBehavior),
      on_error: T.nilable(PgQuery::JsonBehavior),
      pathspec: T.nilable(PgQuery::JsonTablePathSpec),
      quotes: T.nilable(T.any(Symbol, Integer)),
      type_name: T.nilable(PgQuery::TypeName),
      wrapper: T.nilable(T.any(Symbol, Integer))
    ).void
  end
  def initialize(coltype: nil, columns: T.unsafe(nil), format: nil, location: nil, name: nil, on_empty: nil, on_error: nil, pathspec: nil, quotes: nil, type_name: nil, wrapper: nil); end

  sig { void }
  def clear_coltype; end

  sig { void }
  def clear_columns; end

  sig { void }
  def clear_format; end

  sig { void }
  def clear_location; end

  sig { void }
  def clear_name; end

  sig { void }
  def clear_on_empty; end

  sig { void }
  def clear_on_error; end

  sig { void }
  def clear_pathspec; end

  sig { void }
  def clear_quotes; end

  sig { void }
  def clear_type_name; end

  sig { void }
  def clear_wrapper; end

  sig { returns(T.any(Symbol, Integer)) }
  def coltype; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def coltype=(value); end

  sig { returns(Google::Protobuf::RepeatedField[PgQuery::Node]) }
  def columns; end

  sig { params(value: Google::Protobuf::RepeatedField[PgQuery::Node]).void }
  def columns=(value); end

  sig { returns(T.nilable(PgQuery::JsonFormat)) }
  def format; end

  sig { params(value: T.nilable(PgQuery::JsonFormat)).void }
  def format=(value); end

  sig { returns(Object) }
  def has_format?; end

  sig { returns(Object) }
  def has_on_empty?; end

  sig { returns(Object) }
  def has_on_error?; end

  sig { returns(Object) }
  def has_pathspec?; end

  sig { returns(Object) }
  def has_type_name?; end

  sig { returns(Integer) }
  def location; end

  sig { params(value: Integer).void }
  def location=(value); end

  sig { returns(String) }
  def name; end

  sig { params(value: String).void }
  def name=(value); end

  sig { returns(T.nilable(PgQuery::JsonBehavior)) }
  def on_empty; end

  sig { params(value: T.nilable(PgQuery::JsonBehavior)).void }
  def on_empty=(value); end

  sig { returns(T.nilable(PgQuery::JsonBehavior)) }
  def on_error; end

  sig { params(value: T.nilable(PgQuery::JsonBehavior)).void }
  def on_error=(value); end

  sig { returns(T.nilable(PgQuery::JsonTablePathSpec)) }
  def pathspec; end

  sig { params(value: T.nilable(PgQuery::JsonTablePathSpec)).void }
  def pathspec=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def quotes; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def quotes=(value); end

  sig { returns(T.nilable(PgQuery::TypeName)) }
  def type_name; end

  sig { params(value: T.nilable(PgQuery::TypeName)).void }
  def type_name=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def wrapper; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def wrapper=(value); end
end
