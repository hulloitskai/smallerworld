# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `PgQuery::CreatePLangStmt`.
# Please instead update this file by running `bin/tapioca dsl PgQuery::CreatePLangStmt`.


class PgQuery::CreatePLangStmt < Google::Protobuf::AbstractMessage
  sig do
    params(
      plhandler: T.nilable(T.any(Google::Protobuf::RepeatedField[PgQuery::Node], T::Array[PgQuery::Node])),
      plinline: T.nilable(T.any(Google::Protobuf::RepeatedField[PgQuery::Node], T::Array[PgQuery::Node])),
      plname: T.nilable(String),
      pltrusted: T.nilable(T::Boolean),
      plvalidator: T.nilable(T.any(Google::Protobuf::RepeatedField[PgQuery::Node], T::Array[PgQuery::Node])),
      replace: T.nilable(T::Boolean)
    ).void
  end
  def initialize(plhandler: T.unsafe(nil), plinline: T.unsafe(nil), plname: nil, pltrusted: nil, plvalidator: T.unsafe(nil), replace: nil); end

  sig { void }
  def clear_plhandler; end

  sig { void }
  def clear_plinline; end

  sig { void }
  def clear_plname; end

  sig { void }
  def clear_pltrusted; end

  sig { void }
  def clear_plvalidator; end

  sig { void }
  def clear_replace; end

  sig { returns(Google::Protobuf::RepeatedField[PgQuery::Node]) }
  def plhandler; end

  sig { params(value: Google::Protobuf::RepeatedField[PgQuery::Node]).void }
  def plhandler=(value); end

  sig { returns(Google::Protobuf::RepeatedField[PgQuery::Node]) }
  def plinline; end

  sig { params(value: Google::Protobuf::RepeatedField[PgQuery::Node]).void }
  def plinline=(value); end

  sig { returns(String) }
  def plname; end

  sig { params(value: String).void }
  def plname=(value); end

  sig { returns(T::Boolean) }
  def pltrusted; end

  sig { params(value: T::Boolean).void }
  def pltrusted=(value); end

  sig { returns(Google::Protobuf::RepeatedField[PgQuery::Node]) }
  def plvalidator; end

  sig { params(value: Google::Protobuf::RepeatedField[PgQuery::Node]).void }
  def plvalidator=(value); end

  sig { returns(T::Boolean) }
  def replace; end

  sig { params(value: T::Boolean).void }
  def replace=(value); end
end
