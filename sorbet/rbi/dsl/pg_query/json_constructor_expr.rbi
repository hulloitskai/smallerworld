# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `PgQuery::JsonConstructorExpr`.
# Please instead update this file by running `bin/tapioca dsl PgQuery::JsonConstructorExpr`.


class PgQuery::JsonConstructorExpr < Google::Protobuf::AbstractMessage
  sig do
    params(
      absent_on_null: T.nilable(T::Boolean),
      args: T.nilable(T.any(Google::Protobuf::RepeatedField[PgQuery::Node], T::Array[PgQuery::Node])),
      coercion: T.nilable(PgQuery::Node),
      func: T.nilable(PgQuery::Node),
      location: T.nilable(Integer),
      returning: T.nilable(PgQuery::JsonReturning),
      type: T.nilable(T.any(Symbol, Integer)),
      unique: T.nilable(T::Boolean),
      xpr: T.nilable(PgQuery::Node)
    ).void
  end
  def initialize(absent_on_null: nil, args: T.unsafe(nil), coercion: nil, func: nil, location: nil, returning: nil, type: nil, unique: nil, xpr: nil); end

  sig { returns(T::Boolean) }
  def absent_on_null; end

  sig { params(value: T::Boolean).void }
  def absent_on_null=(value); end

  sig { returns(Google::Protobuf::RepeatedField[PgQuery::Node]) }
  def args; end

  sig { params(value: Google::Protobuf::RepeatedField[PgQuery::Node]).void }
  def args=(value); end

  sig { void }
  def clear_absent_on_null; end

  sig { void }
  def clear_args; end

  sig { void }
  def clear_coercion; end

  sig { void }
  def clear_func; end

  sig { void }
  def clear_location; end

  sig { void }
  def clear_returning; end

  sig { void }
  def clear_type; end

  sig { void }
  def clear_unique; end

  sig { void }
  def clear_xpr; end

  sig { returns(T.nilable(PgQuery::Node)) }
  def coercion; end

  sig { params(value: T.nilable(PgQuery::Node)).void }
  def coercion=(value); end

  sig { returns(T.nilable(PgQuery::Node)) }
  def func; end

  sig { params(value: T.nilable(PgQuery::Node)).void }
  def func=(value); end

  sig { returns(Object) }
  def has_coercion?; end

  sig { returns(Object) }
  def has_func?; end

  sig { returns(Object) }
  def has_returning?; end

  sig { returns(Object) }
  def has_xpr?; end

  sig { returns(Integer) }
  def location; end

  sig { params(value: Integer).void }
  def location=(value); end

  sig { returns(T.nilable(PgQuery::JsonReturning)) }
  def returning; end

  sig { params(value: T.nilable(PgQuery::JsonReturning)).void }
  def returning=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def type; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def type=(value); end

  sig { returns(T::Boolean) }
  def unique; end

  sig { params(value: T::Boolean).void }
  def unique=(value); end

  sig { returns(T.nilable(PgQuery::Node)) }
  def xpr; end

  sig { params(value: T.nilable(PgQuery::Node)).void }
  def xpr=(value); end
end
