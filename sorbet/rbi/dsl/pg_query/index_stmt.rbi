# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `PgQuery::IndexStmt`.
# Please instead update this file by running `bin/tapioca dsl PgQuery::IndexStmt`.


class PgQuery::IndexStmt < Google::Protobuf::AbstractMessage
  sig do
    params(
      access_method: T.nilable(String),
      concurrent: T.nilable(T::Boolean),
      deferrable: T.nilable(T::Boolean),
      exclude_op_names: T.nilable(T.any(Google::Protobuf::RepeatedField[PgQuery::Node], T::Array[PgQuery::Node])),
      idxcomment: T.nilable(String),
      idxname: T.nilable(String),
      if_not_exists: T.nilable(T::Boolean),
      index_including_params: T.nilable(T.any(Google::Protobuf::RepeatedField[PgQuery::Node], T::Array[PgQuery::Node])),
      index_oid: T.nilable(Integer),
      index_params: T.nilable(T.any(Google::Protobuf::RepeatedField[PgQuery::Node], T::Array[PgQuery::Node])),
      initdeferred: T.nilable(T::Boolean),
      isconstraint: T.nilable(T::Boolean),
      nulls_not_distinct: T.nilable(T::Boolean),
      old_create_subid: T.nilable(Integer),
      old_first_relfilelocator_subid: T.nilable(Integer),
      old_number: T.nilable(Integer),
      options: T.nilable(T.any(Google::Protobuf::RepeatedField[PgQuery::Node], T::Array[PgQuery::Node])),
      primary: T.nilable(T::Boolean),
      relation: T.nilable(PgQuery::RangeVar),
      reset_default_tblspc: T.nilable(T::Boolean),
      table_space: T.nilable(String),
      transformed: T.nilable(T::Boolean),
      unique: T.nilable(T::Boolean),
      where_clause: T.nilable(PgQuery::Node)
    ).void
  end
  def initialize(access_method: nil, concurrent: nil, deferrable: nil, exclude_op_names: T.unsafe(nil), idxcomment: nil, idxname: nil, if_not_exists: nil, index_including_params: T.unsafe(nil), index_oid: nil, index_params: T.unsafe(nil), initdeferred: nil, isconstraint: nil, nulls_not_distinct: nil, old_create_subid: nil, old_first_relfilelocator_subid: nil, old_number: nil, options: T.unsafe(nil), primary: nil, relation: nil, reset_default_tblspc: nil, table_space: nil, transformed: nil, unique: nil, where_clause: nil); end

  sig { returns(String) }
  def access_method; end

  sig { params(value: String).void }
  def access_method=(value); end

  sig { void }
  def clear_access_method; end

  sig { void }
  def clear_concurrent; end

  sig { void }
  def clear_deferrable; end

  sig { void }
  def clear_exclude_op_names; end

  sig { void }
  def clear_idxcomment; end

  sig { void }
  def clear_idxname; end

  sig { void }
  def clear_if_not_exists; end

  sig { void }
  def clear_index_including_params; end

  sig { void }
  def clear_index_oid; end

  sig { void }
  def clear_index_params; end

  sig { void }
  def clear_initdeferred; end

  sig { void }
  def clear_isconstraint; end

  sig { void }
  def clear_nulls_not_distinct; end

  sig { void }
  def clear_old_create_subid; end

  sig { void }
  def clear_old_first_relfilelocator_subid; end

  sig { void }
  def clear_old_number; end

  sig { void }
  def clear_options; end

  sig { void }
  def clear_primary; end

  sig { void }
  def clear_relation; end

  sig { void }
  def clear_reset_default_tblspc; end

  sig { void }
  def clear_table_space; end

  sig { void }
  def clear_transformed; end

  sig { void }
  def clear_unique; end

  sig { void }
  def clear_where_clause; end

  sig { returns(T::Boolean) }
  def concurrent; end

  sig { params(value: T::Boolean).void }
  def concurrent=(value); end

  sig { returns(T::Boolean) }
  def deferrable; end

  sig { params(value: T::Boolean).void }
  def deferrable=(value); end

  sig { returns(Google::Protobuf::RepeatedField[PgQuery::Node]) }
  def exclude_op_names; end

  sig { params(value: Google::Protobuf::RepeatedField[PgQuery::Node]).void }
  def exclude_op_names=(value); end

  sig { returns(Object) }
  def has_relation?; end

  sig { returns(Object) }
  def has_where_clause?; end

  sig { returns(String) }
  def idxcomment; end

  sig { params(value: String).void }
  def idxcomment=(value); end

  sig { returns(String) }
  def idxname; end

  sig { params(value: String).void }
  def idxname=(value); end

  sig { returns(T::Boolean) }
  def if_not_exists; end

  sig { params(value: T::Boolean).void }
  def if_not_exists=(value); end

  sig { returns(Google::Protobuf::RepeatedField[PgQuery::Node]) }
  def index_including_params; end

  sig { params(value: Google::Protobuf::RepeatedField[PgQuery::Node]).void }
  def index_including_params=(value); end

  sig { returns(Integer) }
  def index_oid; end

  sig { params(value: Integer).void }
  def index_oid=(value); end

  sig { returns(Google::Protobuf::RepeatedField[PgQuery::Node]) }
  def index_params; end

  sig { params(value: Google::Protobuf::RepeatedField[PgQuery::Node]).void }
  def index_params=(value); end

  sig { returns(T::Boolean) }
  def initdeferred; end

  sig { params(value: T::Boolean).void }
  def initdeferred=(value); end

  sig { returns(T::Boolean) }
  def isconstraint; end

  sig { params(value: T::Boolean).void }
  def isconstraint=(value); end

  sig { returns(T::Boolean) }
  def nulls_not_distinct; end

  sig { params(value: T::Boolean).void }
  def nulls_not_distinct=(value); end

  sig { returns(Integer) }
  def old_create_subid; end

  sig { params(value: Integer).void }
  def old_create_subid=(value); end

  sig { returns(Integer) }
  def old_first_relfilelocator_subid; end

  sig { params(value: Integer).void }
  def old_first_relfilelocator_subid=(value); end

  sig { returns(Integer) }
  def old_number; end

  sig { params(value: Integer).void }
  def old_number=(value); end

  sig { returns(Google::Protobuf::RepeatedField[PgQuery::Node]) }
  def options; end

  sig { params(value: Google::Protobuf::RepeatedField[PgQuery::Node]).void }
  def options=(value); end

  sig { returns(T::Boolean) }
  def primary; end

  sig { params(value: T::Boolean).void }
  def primary=(value); end

  sig { returns(T.nilable(PgQuery::RangeVar)) }
  def relation; end

  sig { params(value: T.nilable(PgQuery::RangeVar)).void }
  def relation=(value); end

  sig { returns(T::Boolean) }
  def reset_default_tblspc; end

  sig { params(value: T::Boolean).void }
  def reset_default_tblspc=(value); end

  sig { returns(String) }
  def table_space; end

  sig { params(value: String).void }
  def table_space=(value); end

  sig { returns(T::Boolean) }
  def transformed; end

  sig { params(value: T::Boolean).void }
  def transformed=(value); end

  sig { returns(T::Boolean) }
  def unique; end

  sig { params(value: T::Boolean).void }
  def unique=(value); end

  sig { returns(T.nilable(PgQuery::Node)) }
  def where_clause; end

  sig { params(value: T.nilable(PgQuery::Node)).void }
  def where_clause=(value); end
end
