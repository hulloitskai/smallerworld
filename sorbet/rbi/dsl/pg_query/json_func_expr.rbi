# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `PgQuery::JsonFuncExpr`.
# Please instead update this file by running `bin/tapioca dsl PgQuery::JsonFuncExpr`.


class PgQuery::JsonFuncExpr < Google::Protobuf::AbstractMessage
  sig do
    params(
      column_name: T.nilable(String),
      context_item: T.nilable(PgQuery::JsonValueExpr),
      location: T.nilable(Integer),
      on_empty: T.nilable(PgQuery::JsonBehavior),
      on_error: T.nilable(PgQuery::JsonBehavior),
      op: T.nilable(T.any(Symbol, Integer)),
      output: T.nilable(PgQuery::JsonOutput),
      passing: T.nilable(T.any(Google::Protobuf::RepeatedField[PgQuery::Node], T::Array[PgQuery::Node])),
      pathspec: T.nilable(PgQuery::Node),
      quotes: T.nilable(T.any(Symbol, Integer)),
      wrapper: T.nilable(T.any(Symbol, Integer))
    ).void
  end
  def initialize(column_name: nil, context_item: nil, location: nil, on_empty: nil, on_error: nil, op: nil, output: nil, passing: T.unsafe(nil), pathspec: nil, quotes: nil, wrapper: nil); end

  sig { void }
  def clear_column_name; end

  sig { void }
  def clear_context_item; end

  sig { void }
  def clear_location; end

  sig { void }
  def clear_on_empty; end

  sig { void }
  def clear_on_error; end

  sig { void }
  def clear_op; end

  sig { void }
  def clear_output; end

  sig { void }
  def clear_passing; end

  sig { void }
  def clear_pathspec; end

  sig { void }
  def clear_quotes; end

  sig { void }
  def clear_wrapper; end

  sig { returns(String) }
  def column_name; end

  sig { params(value: String).void }
  def column_name=(value); end

  sig { returns(T.nilable(PgQuery::JsonValueExpr)) }
  def context_item; end

  sig { params(value: T.nilable(PgQuery::JsonValueExpr)).void }
  def context_item=(value); end

  sig { returns(Object) }
  def has_context_item?; end

  sig { returns(Object) }
  def has_on_empty?; end

  sig { returns(Object) }
  def has_on_error?; end

  sig { returns(Object) }
  def has_output?; end

  sig { returns(Object) }
  def has_pathspec?; end

  sig { returns(Integer) }
  def location; end

  sig { params(value: Integer).void }
  def location=(value); end

  sig { returns(T.nilable(PgQuery::JsonBehavior)) }
  def on_empty; end

  sig { params(value: T.nilable(PgQuery::JsonBehavior)).void }
  def on_empty=(value); end

  sig { returns(T.nilable(PgQuery::JsonBehavior)) }
  def on_error; end

  sig { params(value: T.nilable(PgQuery::JsonBehavior)).void }
  def on_error=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def op; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def op=(value); end

  sig { returns(T.nilable(PgQuery::JsonOutput)) }
  def output; end

  sig { params(value: T.nilable(PgQuery::JsonOutput)).void }
  def output=(value); end

  sig { returns(Google::Protobuf::RepeatedField[PgQuery::Node]) }
  def passing; end

  sig { params(value: Google::Protobuf::RepeatedField[PgQuery::Node]).void }
  def passing=(value); end

  sig { returns(T.nilable(PgQuery::Node)) }
  def pathspec; end

  sig { params(value: T.nilable(PgQuery::Node)).void }
  def pathspec=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def quotes; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def quotes=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def wrapper; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def wrapper=(value); end
end
