# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `PgQuery::ViewStmt`.
# Please instead update this file by running `bin/tapioca dsl PgQuery::ViewStmt`.


class PgQuery::ViewStmt < Google::Protobuf::AbstractMessage
  sig do
    params(
      aliases: T.nilable(T.any(Google::Protobuf::RepeatedField[PgQuery::Node], T::Array[PgQuery::Node])),
      options: T.nilable(T.any(Google::Protobuf::RepeatedField[PgQuery::Node], T::Array[PgQuery::Node])),
      query: T.nilable(PgQuery::Node),
      replace: T.nilable(T::Boolean),
      view: T.nilable(PgQuery::RangeVar),
      with_check_option: T.nilable(T.any(Symbol, Integer))
    ).void
  end
  def initialize(aliases: T.unsafe(nil), options: T.unsafe(nil), query: nil, replace: nil, view: nil, with_check_option: nil); end

  sig { returns(Google::Protobuf::RepeatedField[PgQuery::Node]) }
  def aliases; end

  sig { params(value: Google::Protobuf::RepeatedField[PgQuery::Node]).void }
  def aliases=(value); end

  sig { void }
  def clear_aliases; end

  sig { void }
  def clear_options; end

  sig { void }
  def clear_query; end

  sig { void }
  def clear_replace; end

  sig { void }
  def clear_view; end

  sig { void }
  def clear_with_check_option; end

  sig { returns(Object) }
  def has_query?; end

  sig { returns(Object) }
  def has_view?; end

  sig { returns(Google::Protobuf::RepeatedField[PgQuery::Node]) }
  def options; end

  sig { params(value: Google::Protobuf::RepeatedField[PgQuery::Node]).void }
  def options=(value); end

  sig { returns(T.nilable(PgQuery::Node)) }
  def query; end

  sig { params(value: T.nilable(PgQuery::Node)).void }
  def query=(value); end

  sig { returns(T::Boolean) }
  def replace; end

  sig { params(value: T::Boolean).void }
  def replace=(value); end

  sig { returns(T.nilable(PgQuery::RangeVar)) }
  def view; end

  sig { params(value: T.nilable(PgQuery::RangeVar)).void }
  def view=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def with_check_option; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def with_check_option=(value); end
end
