# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `PgQuery::DefineStmt`.
# Please instead update this file by running `bin/tapioca dsl PgQuery::DefineStmt`.


class PgQuery::DefineStmt < Google::Protobuf::AbstractMessage
  sig do
    params(
      args: T.nilable(T.any(Google::Protobuf::RepeatedField[PgQuery::Node], T::Array[PgQuery::Node])),
      definition: T.nilable(T.any(Google::Protobuf::RepeatedField[PgQuery::Node], T::Array[PgQuery::Node])),
      defnames: T.nilable(T.any(Google::Protobuf::RepeatedField[PgQuery::Node], T::Array[PgQuery::Node])),
      if_not_exists: T.nilable(T::Boolean),
      kind: T.nilable(T.any(Symbol, Integer)),
      oldstyle: T.nilable(T::Boolean),
      replace: T.nilable(T::Boolean)
    ).void
  end
  def initialize(args: T.unsafe(nil), definition: T.unsafe(nil), defnames: T.unsafe(nil), if_not_exists: nil, kind: nil, oldstyle: nil, replace: nil); end

  sig { returns(Google::Protobuf::RepeatedField[PgQuery::Node]) }
  def args; end

  sig { params(value: Google::Protobuf::RepeatedField[PgQuery::Node]).void }
  def args=(value); end

  sig { void }
  def clear_args; end

  sig { void }
  def clear_definition; end

  sig { void }
  def clear_defnames; end

  sig { void }
  def clear_if_not_exists; end

  sig { void }
  def clear_kind; end

  sig { void }
  def clear_oldstyle; end

  sig { void }
  def clear_replace; end

  sig { returns(Google::Protobuf::RepeatedField[PgQuery::Node]) }
  def definition; end

  sig { params(value: Google::Protobuf::RepeatedField[PgQuery::Node]).void }
  def definition=(value); end

  sig { returns(Google::Protobuf::RepeatedField[PgQuery::Node]) }
  def defnames; end

  sig { params(value: Google::Protobuf::RepeatedField[PgQuery::Node]).void }
  def defnames=(value); end

  sig { returns(T::Boolean) }
  def if_not_exists; end

  sig { params(value: T::Boolean).void }
  def if_not_exists=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def kind; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def kind=(value); end

  sig { returns(T::Boolean) }
  def oldstyle; end

  sig { params(value: T::Boolean).void }
  def oldstyle=(value); end

  sig { returns(T::Boolean) }
  def replace; end

  sig { params(value: T::Boolean).void }
  def replace=(value); end
end
