# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `PgQuery::InsertStmt`.
# Please instead update this file by running `bin/tapioca dsl PgQuery::InsertStmt`.


class PgQuery::InsertStmt < Google::Protobuf::AbstractMessage
  sig do
    params(
      cols: T.nilable(T.any(Google::Protobuf::RepeatedField[PgQuery::Node], T::Array[PgQuery::Node])),
      on_conflict_clause: T.nilable(PgQuery::OnConflictClause),
      override: T.nilable(T.any(Symbol, Integer)),
      relation: T.nilable(PgQuery::RangeVar),
      returning_list: T.nilable(T.any(Google::Protobuf::RepeatedField[PgQuery::Node], T::Array[PgQuery::Node])),
      select_stmt: T.nilable(PgQuery::Node),
      with_clause: T.nilable(PgQuery::WithClause)
    ).void
  end
  def initialize(cols: T.unsafe(nil), on_conflict_clause: nil, override: nil, relation: nil, returning_list: T.unsafe(nil), select_stmt: nil, with_clause: nil); end

  sig { void }
  def clear_cols; end

  sig { void }
  def clear_on_conflict_clause; end

  sig { void }
  def clear_override; end

  sig { void }
  def clear_relation; end

  sig { void }
  def clear_returning_list; end

  sig { void }
  def clear_select_stmt; end

  sig { void }
  def clear_with_clause; end

  sig { returns(Google::Protobuf::RepeatedField[PgQuery::Node]) }
  def cols; end

  sig { params(value: Google::Protobuf::RepeatedField[PgQuery::Node]).void }
  def cols=(value); end

  sig { returns(Object) }
  def has_on_conflict_clause?; end

  sig { returns(Object) }
  def has_relation?; end

  sig { returns(Object) }
  def has_select_stmt?; end

  sig { returns(Object) }
  def has_with_clause?; end

  sig { returns(T.nilable(PgQuery::OnConflictClause)) }
  def on_conflict_clause; end

  sig { params(value: T.nilable(PgQuery::OnConflictClause)).void }
  def on_conflict_clause=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def override; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def override=(value); end

  sig { returns(T.nilable(PgQuery::RangeVar)) }
  def relation; end

  sig { params(value: T.nilable(PgQuery::RangeVar)).void }
  def relation=(value); end

  sig { returns(Google::Protobuf::RepeatedField[PgQuery::Node]) }
  def returning_list; end

  sig { params(value: Google::Protobuf::RepeatedField[PgQuery::Node]).void }
  def returning_list=(value); end

  sig { returns(T.nilable(PgQuery::Node)) }
  def select_stmt; end

  sig { params(value: T.nilable(PgQuery::Node)).void }
  def select_stmt=(value); end

  sig { returns(T.nilable(PgQuery::WithClause)) }
  def with_clause; end

  sig { params(value: T.nilable(PgQuery::WithClause)).void }
  def with_clause=(value); end
end
