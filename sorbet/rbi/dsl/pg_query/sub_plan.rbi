# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `PgQuery::SubPlan`.
# Please instead update this file by running `bin/tapioca dsl PgQuery::SubPlan`.


class PgQuery::SubPlan < Google::Protobuf::AbstractMessage
  sig do
    params(
      args: T.nilable(T.any(Google::Protobuf::RepeatedField[PgQuery::Node], T::Array[PgQuery::Node])),
      first_col_collation: T.nilable(Integer),
      first_col_type: T.nilable(Integer),
      first_col_typmod: T.nilable(Integer),
      par_param: T.nilable(T.any(Google::Protobuf::RepeatedField[PgQuery::Node], T::Array[PgQuery::Node])),
      parallel_safe: T.nilable(T::Boolean),
      param_ids: T.nilable(T.any(Google::Protobuf::RepeatedField[PgQuery::Node], T::Array[PgQuery::Node])),
      per_call_cost: T.nilable(Float),
      plan_id: T.nilable(Integer),
      plan_name: T.nilable(String),
      set_param: T.nilable(T.any(Google::Protobuf::RepeatedField[PgQuery::Node], T::Array[PgQuery::Node])),
      startup_cost: T.nilable(Float),
      sub_link_type: T.nilable(T.any(Symbol, Integer)),
      testexpr: T.nilable(PgQuery::Node),
      unknown_eq_false: T.nilable(T::Boolean),
      use_hash_table: T.nilable(T::Boolean),
      xpr: T.nilable(PgQuery::Node)
    ).void
  end
  def initialize(args: T.unsafe(nil), first_col_collation: nil, first_col_type: nil, first_col_typmod: nil, par_param: T.unsafe(nil), parallel_safe: nil, param_ids: T.unsafe(nil), per_call_cost: nil, plan_id: nil, plan_name: nil, set_param: T.unsafe(nil), startup_cost: nil, sub_link_type: nil, testexpr: nil, unknown_eq_false: nil, use_hash_table: nil, xpr: nil); end

  sig { returns(Google::Protobuf::RepeatedField[PgQuery::Node]) }
  def args; end

  sig { params(value: Google::Protobuf::RepeatedField[PgQuery::Node]).void }
  def args=(value); end

  sig { void }
  def clear_args; end

  sig { void }
  def clear_first_col_collation; end

  sig { void }
  def clear_first_col_type; end

  sig { void }
  def clear_first_col_typmod; end

  sig { void }
  def clear_par_param; end

  sig { void }
  def clear_parallel_safe; end

  sig { void }
  def clear_param_ids; end

  sig { void }
  def clear_per_call_cost; end

  sig { void }
  def clear_plan_id; end

  sig { void }
  def clear_plan_name; end

  sig { void }
  def clear_set_param; end

  sig { void }
  def clear_startup_cost; end

  sig { void }
  def clear_sub_link_type; end

  sig { void }
  def clear_testexpr; end

  sig { void }
  def clear_unknown_eq_false; end

  sig { void }
  def clear_use_hash_table; end

  sig { void }
  def clear_xpr; end

  sig { returns(Integer) }
  def first_col_collation; end

  sig { params(value: Integer).void }
  def first_col_collation=(value); end

  sig { returns(Integer) }
  def first_col_type; end

  sig { params(value: Integer).void }
  def first_col_type=(value); end

  sig { returns(Integer) }
  def first_col_typmod; end

  sig { params(value: Integer).void }
  def first_col_typmod=(value); end

  sig { returns(Object) }
  def has_testexpr?; end

  sig { returns(Object) }
  def has_xpr?; end

  sig { returns(Google::Protobuf::RepeatedField[PgQuery::Node]) }
  def par_param; end

  sig { params(value: Google::Protobuf::RepeatedField[PgQuery::Node]).void }
  def par_param=(value); end

  sig { returns(T::Boolean) }
  def parallel_safe; end

  sig { params(value: T::Boolean).void }
  def parallel_safe=(value); end

  sig { returns(Google::Protobuf::RepeatedField[PgQuery::Node]) }
  def param_ids; end

  sig { params(value: Google::Protobuf::RepeatedField[PgQuery::Node]).void }
  def param_ids=(value); end

  sig { returns(Float) }
  def per_call_cost; end

  sig { params(value: Float).void }
  def per_call_cost=(value); end

  sig { returns(Integer) }
  def plan_id; end

  sig { params(value: Integer).void }
  def plan_id=(value); end

  sig { returns(String) }
  def plan_name; end

  sig { params(value: String).void }
  def plan_name=(value); end

  sig { returns(Google::Protobuf::RepeatedField[PgQuery::Node]) }
  def set_param; end

  sig { params(value: Google::Protobuf::RepeatedField[PgQuery::Node]).void }
  def set_param=(value); end

  sig { returns(Float) }
  def startup_cost; end

  sig { params(value: Float).void }
  def startup_cost=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def sub_link_type; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def sub_link_type=(value); end

  sig { returns(T.nilable(PgQuery::Node)) }
  def testexpr; end

  sig { params(value: T.nilable(PgQuery::Node)).void }
  def testexpr=(value); end

  sig { returns(T::Boolean) }
  def unknown_eq_false; end

  sig { params(value: T::Boolean).void }
  def unknown_eq_false=(value); end

  sig { returns(T::Boolean) }
  def use_hash_table; end

  sig { params(value: T::Boolean).void }
  def use_hash_table=(value); end

  sig { returns(T.nilable(PgQuery::Node)) }
  def xpr; end

  sig { params(value: T.nilable(PgQuery::Node)).void }
  def xpr=(value); end
end
