# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `PgQuery::RuleStmt`.
# Please instead update this file by running `bin/tapioca dsl PgQuery::RuleStmt`.


class PgQuery::RuleStmt < Google::Protobuf::AbstractMessage
  sig do
    params(
      actions: T.nilable(T.any(Google::Protobuf::RepeatedField[PgQuery::Node], T::Array[PgQuery::Node])),
      event: T.nilable(T.any(Symbol, Integer)),
      instead: T.nilable(T::Boolean),
      relation: T.nilable(PgQuery::RangeVar),
      replace: T.nilable(T::Boolean),
      rulename: T.nilable(String),
      where_clause: T.nilable(PgQuery::Node)
    ).void
  end
  def initialize(actions: T.unsafe(nil), event: nil, instead: nil, relation: nil, replace: nil, rulename: nil, where_clause: nil); end

  sig { returns(Google::Protobuf::RepeatedField[PgQuery::Node]) }
  def actions; end

  sig { params(value: Google::Protobuf::RepeatedField[PgQuery::Node]).void }
  def actions=(value); end

  sig { void }
  def clear_actions; end

  sig { void }
  def clear_event; end

  sig { void }
  def clear_instead; end

  sig { void }
  def clear_relation; end

  sig { void }
  def clear_replace; end

  sig { void }
  def clear_rulename; end

  sig { void }
  def clear_where_clause; end

  sig { returns(T.any(Symbol, Integer)) }
  def event; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def event=(value); end

  sig { returns(Object) }
  def has_relation?; end

  sig { returns(Object) }
  def has_where_clause?; end

  sig { returns(T::Boolean) }
  def instead; end

  sig { params(value: T::Boolean).void }
  def instead=(value); end

  sig { returns(T.nilable(PgQuery::RangeVar)) }
  def relation; end

  sig { params(value: T.nilable(PgQuery::RangeVar)).void }
  def relation=(value); end

  sig { returns(T::Boolean) }
  def replace; end

  sig { params(value: T::Boolean).void }
  def replace=(value); end

  sig { returns(String) }
  def rulename; end

  sig { params(value: String).void }
  def rulename=(value); end

  sig { returns(T.nilable(PgQuery::Node)) }
  def where_clause; end

  sig { params(value: T.nilable(PgQuery::Node)).void }
  def where_clause=(value); end
end
