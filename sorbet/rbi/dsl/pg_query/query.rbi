# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `PgQuery::Query`.
# Please instead update this file by running `bin/tapioca dsl PgQuery::Query`.


class PgQuery::Query < Google::Protobuf::AbstractMessage
  sig do
    params(
      can_set_tag: T.nilable(T::Boolean),
      command_type: T.nilable(T.any(Symbol, Integer)),
      constraint_deps: T.nilable(T.any(Google::Protobuf::RepeatedField[PgQuery::Node], T::Array[PgQuery::Node])),
      cte_list: T.nilable(T.any(Google::Protobuf::RepeatedField[PgQuery::Node], T::Array[PgQuery::Node])),
      distinct_clause: T.nilable(T.any(Google::Protobuf::RepeatedField[PgQuery::Node], T::Array[PgQuery::Node])),
      group_clause: T.nilable(T.any(Google::Protobuf::RepeatedField[PgQuery::Node], T::Array[PgQuery::Node])),
      group_distinct: T.nilable(T::Boolean),
      grouping_sets: T.nilable(T.any(Google::Protobuf::RepeatedField[PgQuery::Node], T::Array[PgQuery::Node])),
      has_aggs: T.nilable(T::Boolean),
      has_distinct_on: T.nilable(T::Boolean),
      has_for_update: T.nilable(T::Boolean),
      has_modifying_cte: T.nilable(T::Boolean),
      has_recursive: T.nilable(T::Boolean),
      has_row_security: T.nilable(T::Boolean),
      has_sub_links: T.nilable(T::Boolean),
      has_target_srfs: T.nilable(T::Boolean),
      has_window_funcs: T.nilable(T::Boolean),
      having_qual: T.nilable(PgQuery::Node),
      is_return: T.nilable(T::Boolean),
      jointree: T.nilable(PgQuery::FromExpr),
      limit_count: T.nilable(PgQuery::Node),
      limit_offset: T.nilable(PgQuery::Node),
      limit_option: T.nilable(T.any(Symbol, Integer)),
      merge_action_list: T.nilable(T.any(Google::Protobuf::RepeatedField[PgQuery::Node], T::Array[PgQuery::Node])),
      merge_join_condition: T.nilable(PgQuery::Node),
      merge_target_relation: T.nilable(Integer),
      on_conflict: T.nilable(PgQuery::OnConflictExpr),
      override: T.nilable(T.any(Symbol, Integer)),
      query_source: T.nilable(T.any(Symbol, Integer)),
      result_relation: T.nilable(Integer),
      returning_list: T.nilable(T.any(Google::Protobuf::RepeatedField[PgQuery::Node], T::Array[PgQuery::Node])),
      row_marks: T.nilable(T.any(Google::Protobuf::RepeatedField[PgQuery::Node], T::Array[PgQuery::Node])),
      rtable: T.nilable(T.any(Google::Protobuf::RepeatedField[PgQuery::Node], T::Array[PgQuery::Node])),
      rteperminfos: T.nilable(T.any(Google::Protobuf::RepeatedField[PgQuery::Node], T::Array[PgQuery::Node])),
      set_operations: T.nilable(PgQuery::Node),
      sort_clause: T.nilable(T.any(Google::Protobuf::RepeatedField[PgQuery::Node], T::Array[PgQuery::Node])),
      stmt_len: T.nilable(Integer),
      stmt_location: T.nilable(Integer),
      target_list: T.nilable(T.any(Google::Protobuf::RepeatedField[PgQuery::Node], T::Array[PgQuery::Node])),
      utility_stmt: T.nilable(PgQuery::Node),
      window_clause: T.nilable(T.any(Google::Protobuf::RepeatedField[PgQuery::Node], T::Array[PgQuery::Node])),
      with_check_options: T.nilable(T.any(Google::Protobuf::RepeatedField[PgQuery::Node], T::Array[PgQuery::Node]))
    ).void
  end
  def initialize(can_set_tag: nil, command_type: nil, constraint_deps: T.unsafe(nil), cte_list: T.unsafe(nil), distinct_clause: T.unsafe(nil), group_clause: T.unsafe(nil), group_distinct: nil, grouping_sets: T.unsafe(nil), has_aggs: nil, has_distinct_on: nil, has_for_update: nil, has_modifying_cte: nil, has_recursive: nil, has_row_security: nil, has_sub_links: nil, has_target_srfs: nil, has_window_funcs: nil, having_qual: nil, is_return: nil, jointree: nil, limit_count: nil, limit_offset: nil, limit_option: nil, merge_action_list: T.unsafe(nil), merge_join_condition: nil, merge_target_relation: nil, on_conflict: nil, override: nil, query_source: nil, result_relation: nil, returning_list: T.unsafe(nil), row_marks: T.unsafe(nil), rtable: T.unsafe(nil), rteperminfos: T.unsafe(nil), set_operations: nil, sort_clause: T.unsafe(nil), stmt_len: nil, stmt_location: nil, target_list: T.unsafe(nil), utility_stmt: nil, window_clause: T.unsafe(nil), with_check_options: T.unsafe(nil)); end

  sig { returns(T::Boolean) }
  def can_set_tag; end

  sig { params(value: T::Boolean).void }
  def can_set_tag=(value); end

  sig { void }
  def clear_can_set_tag; end

  sig { void }
  def clear_command_type; end

  sig { void }
  def clear_constraint_deps; end

  sig { void }
  def clear_cte_list; end

  sig { void }
  def clear_distinct_clause; end

  sig { void }
  def clear_group_clause; end

  sig { void }
  def clear_group_distinct; end

  sig { void }
  def clear_grouping_sets; end

  sig { void }
  def clear_has_aggs; end

  sig { void }
  def clear_has_distinct_on; end

  sig { void }
  def clear_has_for_update; end

  sig { void }
  def clear_has_modifying_cte; end

  sig { void }
  def clear_has_recursive; end

  sig { void }
  def clear_has_row_security; end

  sig { void }
  def clear_has_sub_links; end

  sig { void }
  def clear_has_target_srfs; end

  sig { void }
  def clear_has_window_funcs; end

  sig { void }
  def clear_having_qual; end

  sig { void }
  def clear_is_return; end

  sig { void }
  def clear_jointree; end

  sig { void }
  def clear_limit_count; end

  sig { void }
  def clear_limit_offset; end

  sig { void }
  def clear_limit_option; end

  sig { void }
  def clear_merge_action_list; end

  sig { void }
  def clear_merge_join_condition; end

  sig { void }
  def clear_merge_target_relation; end

  sig { void }
  def clear_on_conflict; end

  sig { void }
  def clear_override; end

  sig { void }
  def clear_query_source; end

  sig { void }
  def clear_result_relation; end

  sig { void }
  def clear_returning_list; end

  sig { void }
  def clear_row_marks; end

  sig { void }
  def clear_rtable; end

  sig { void }
  def clear_rteperminfos; end

  sig { void }
  def clear_set_operations; end

  sig { void }
  def clear_sort_clause; end

  sig { void }
  def clear_stmt_len; end

  sig { void }
  def clear_stmt_location; end

  sig { void }
  def clear_target_list; end

  sig { void }
  def clear_utility_stmt; end

  sig { void }
  def clear_window_clause; end

  sig { void }
  def clear_with_check_options; end

  sig { returns(T.any(Symbol, Integer)) }
  def command_type; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def command_type=(value); end

  sig { returns(Google::Protobuf::RepeatedField[PgQuery::Node]) }
  def constraint_deps; end

  sig { params(value: Google::Protobuf::RepeatedField[PgQuery::Node]).void }
  def constraint_deps=(value); end

  sig { returns(Google::Protobuf::RepeatedField[PgQuery::Node]) }
  def cte_list; end

  sig { params(value: Google::Protobuf::RepeatedField[PgQuery::Node]).void }
  def cte_list=(value); end

  sig { returns(Google::Protobuf::RepeatedField[PgQuery::Node]) }
  def distinct_clause; end

  sig { params(value: Google::Protobuf::RepeatedField[PgQuery::Node]).void }
  def distinct_clause=(value); end

  sig { returns(Google::Protobuf::RepeatedField[PgQuery::Node]) }
  def group_clause; end

  sig { params(value: Google::Protobuf::RepeatedField[PgQuery::Node]).void }
  def group_clause=(value); end

  sig { returns(T::Boolean) }
  def group_distinct; end

  sig { params(value: T::Boolean).void }
  def group_distinct=(value); end

  sig { returns(Google::Protobuf::RepeatedField[PgQuery::Node]) }
  def grouping_sets; end

  sig { params(value: Google::Protobuf::RepeatedField[PgQuery::Node]).void }
  def grouping_sets=(value); end

  sig { returns(T::Boolean) }
  def has_aggs; end

  sig { params(value: T::Boolean).void }
  def has_aggs=(value); end

  sig { returns(T::Boolean) }
  def has_distinct_on; end

  sig { params(value: T::Boolean).void }
  def has_distinct_on=(value); end

  sig { returns(T::Boolean) }
  def has_for_update; end

  sig { params(value: T::Boolean).void }
  def has_for_update=(value); end

  sig { returns(Object) }
  def has_having_qual?; end

  sig { returns(Object) }
  def has_jointree?; end

  sig { returns(Object) }
  def has_limit_count?; end

  sig { returns(Object) }
  def has_limit_offset?; end

  sig { returns(Object) }
  def has_merge_join_condition?; end

  sig { returns(T::Boolean) }
  def has_modifying_cte; end

  sig { params(value: T::Boolean).void }
  def has_modifying_cte=(value); end

  sig { returns(Object) }
  def has_on_conflict?; end

  sig { returns(T::Boolean) }
  def has_recursive; end

  sig { params(value: T::Boolean).void }
  def has_recursive=(value); end

  sig { returns(T::Boolean) }
  def has_row_security; end

  sig { params(value: T::Boolean).void }
  def has_row_security=(value); end

  sig { returns(Object) }
  def has_set_operations?; end

  sig { returns(T::Boolean) }
  def has_sub_links; end

  sig { params(value: T::Boolean).void }
  def has_sub_links=(value); end

  sig { returns(T::Boolean) }
  def has_target_srfs; end

  sig { params(value: T::Boolean).void }
  def has_target_srfs=(value); end

  sig { returns(Object) }
  def has_utility_stmt?; end

  sig { returns(T::Boolean) }
  def has_window_funcs; end

  sig { params(value: T::Boolean).void }
  def has_window_funcs=(value); end

  sig { returns(T.nilable(PgQuery::Node)) }
  def having_qual; end

  sig { params(value: T.nilable(PgQuery::Node)).void }
  def having_qual=(value); end

  sig { returns(T::Boolean) }
  def is_return; end

  sig { params(value: T::Boolean).void }
  def is_return=(value); end

  sig { returns(T.nilable(PgQuery::FromExpr)) }
  def jointree; end

  sig { params(value: T.nilable(PgQuery::FromExpr)).void }
  def jointree=(value); end

  sig { returns(T.nilable(PgQuery::Node)) }
  def limit_count; end

  sig { params(value: T.nilable(PgQuery::Node)).void }
  def limit_count=(value); end

  sig { returns(T.nilable(PgQuery::Node)) }
  def limit_offset; end

  sig { params(value: T.nilable(PgQuery::Node)).void }
  def limit_offset=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def limit_option; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def limit_option=(value); end

  sig { returns(Google::Protobuf::RepeatedField[PgQuery::Node]) }
  def merge_action_list; end

  sig { params(value: Google::Protobuf::RepeatedField[PgQuery::Node]).void }
  def merge_action_list=(value); end

  sig { returns(T.nilable(PgQuery::Node)) }
  def merge_join_condition; end

  sig { params(value: T.nilable(PgQuery::Node)).void }
  def merge_join_condition=(value); end

  sig { returns(Integer) }
  def merge_target_relation; end

  sig { params(value: Integer).void }
  def merge_target_relation=(value); end

  sig { returns(T.nilable(PgQuery::OnConflictExpr)) }
  def on_conflict; end

  sig { params(value: T.nilable(PgQuery::OnConflictExpr)).void }
  def on_conflict=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def override; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def override=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def query_source; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def query_source=(value); end

  sig { returns(Integer) }
  def result_relation; end

  sig { params(value: Integer).void }
  def result_relation=(value); end

  sig { returns(Google::Protobuf::RepeatedField[PgQuery::Node]) }
  def returning_list; end

  sig { params(value: Google::Protobuf::RepeatedField[PgQuery::Node]).void }
  def returning_list=(value); end

  sig { returns(Google::Protobuf::RepeatedField[PgQuery::Node]) }
  def row_marks; end

  sig { params(value: Google::Protobuf::RepeatedField[PgQuery::Node]).void }
  def row_marks=(value); end

  sig { returns(Google::Protobuf::RepeatedField[PgQuery::Node]) }
  def rtable; end

  sig { params(value: Google::Protobuf::RepeatedField[PgQuery::Node]).void }
  def rtable=(value); end

  sig { returns(Google::Protobuf::RepeatedField[PgQuery::Node]) }
  def rteperminfos; end

  sig { params(value: Google::Protobuf::RepeatedField[PgQuery::Node]).void }
  def rteperminfos=(value); end

  sig { returns(T.nilable(PgQuery::Node)) }
  def set_operations; end

  sig { params(value: T.nilable(PgQuery::Node)).void }
  def set_operations=(value); end

  sig { returns(Google::Protobuf::RepeatedField[PgQuery::Node]) }
  def sort_clause; end

  sig { params(value: Google::Protobuf::RepeatedField[PgQuery::Node]).void }
  def sort_clause=(value); end

  sig { returns(Integer) }
  def stmt_len; end

  sig { params(value: Integer).void }
  def stmt_len=(value); end

  sig { returns(Integer) }
  def stmt_location; end

  sig { params(value: Integer).void }
  def stmt_location=(value); end

  sig { returns(Google::Protobuf::RepeatedField[PgQuery::Node]) }
  def target_list; end

  sig { params(value: Google::Protobuf::RepeatedField[PgQuery::Node]).void }
  def target_list=(value); end

  sig { returns(T.nilable(PgQuery::Node)) }
  def utility_stmt; end

  sig { params(value: T.nilable(PgQuery::Node)).void }
  def utility_stmt=(value); end

  sig { returns(Google::Protobuf::RepeatedField[PgQuery::Node]) }
  def window_clause; end

  sig { params(value: Google::Protobuf::RepeatedField[PgQuery::Node]).void }
  def window_clause=(value); end

  sig { returns(Google::Protobuf::RepeatedField[PgQuery::Node]) }
  def with_check_options; end

  sig { params(value: Google::Protobuf::RepeatedField[PgQuery::Node]).void }
  def with_check_options=(value); end
end
