/**
 * Generated by: Claude Sonnet 4
 * Last modified: 2025-01-08 22:15:00 UTC
 *
 * This code was AI-generated and may require human review and testing.
 */

// Based on https://developers.canny.io/install
// Web widget render API: https://developers.canny.io/install/widget/web

/**
 * This allows for custom fields to be added to user and company objects.
 * @see https://developers.canny.io/install/add-custom-fields
 */
type CannyCustomFields = Record<string, string | number | boolean | null>;

/**
 * Represents a user in Canny.
 * @see https://developers.canny.io/install
 */
interface CannyUser {
  id: string;
  name: string;
  email: string;
  avatarURL?: string;
  created?: string; // ISO 8601 date string
  customFields?: CannyCustomFields;
}

/**
 * Represents a company in Canny.
 * @see https://developers.canny.io/install/add-company-data
 */
interface CannyCompany {
  id: string;
  name: string;
  created?: string; // ISO 8601 date string
  monthlySpend?: number;
  customFields?: CannyCustomFields;
}

/**
 * Options for the 'identify' command.
 * @see https://developers.canny.io/install
 * @see https://developers.canny.io/install/advanced
 */
interface CannyIdentifyOptions {
  appID: string;
  user: CannyUser;
  company?: CannyCompany;
  authenticateLinks?: boolean;
}

/**
 * Options for the 'render' command (Web Widget).
 * @see https://developers.canny.io/install/widget/web
 */
interface CannyRenderOptions {
  boardToken: string;
  basePath?: string | null;
  ssoToken?: string | null;
  theme?: "light" | "dark" | "auto";
}

/**
 * Callback function for the identify command.
 * Called when identification completes (regardless of success or failure).
 * @see https://developers.canny.io/install/advanced
 */
type CannyIdentifyCallback = () => void;

/**
 * A tuple representing the arguments for a Canny command.
 */
type CannyCommandArgs =
  | ["identify", CannyIdentifyOptions]
  | ["identify", CannyIdentifyOptions, CannyIdentifyCallback]
  | ["render", CannyRenderOptions]
  | ["authenticateCannyLink", string];

/**
 * The Canny function is a command queue.
 */
interface CannyFunction {
  (...args: CannyCommandArgs): void | string;
  q: CannyCommandArgs[];
}

declare global {
  const Canny: CannyFunction;

  interface Window {
    Canny: CannyFunction;
  }
}

export {};
