#!/usr/bin/env bash

# Format code after making changes
# Usage: bin/cursor_agent_format_code

set -e

echo "üîß Setting up environment..."

# Setup Node.js
export PATH="$HOME/.nodenv/bin:$PATH"
if command -v nodenv >/dev/null 2>&1; then
  eval "$(nodenv init -)"
fi

# Function to check if a package is available
check_package() {
  local package_name="$1"
  local use_project="$2"
  
  if [ "$use_project" = "true" ]; then
    npm list "$package_name" >/dev/null 2>&1
  else
    command -v "$package_name" >/dev/null 2>&1
  fi
}

# Function to get command with fallback
get_command() {
  local package_name="$1"
  local use_project="$2"
  
  if [ "$use_project" = "true" ] && check_package "$package_name" true; then
    echo "npm exec -- $package_name"
  elif check_package "$package_name" false; then
    echo "npx $package_name"
  else
    echo ""
  fi
}

# Use project dependencies by default, fall back to global if needed
USE_PROJECT_DEPS=${USE_PROJECT_DEPS:-true}

# Check if package.json exists (we're in a Node.js project)
if [ ! -f "package.json" ]; then
  echo "‚ö†Ô∏è No package.json found, using global tools..."
  USE_PROJECT_DEPS=false
fi

# Get commands with automatic fallback
PRETTIER_CMD=$(get_command "prettier" "$USE_PROJECT_DEPS")
ESLINT_CMD=$(get_command "eslint" "$USE_PROJECT_DEPS")
LEFTHOOK_CMD=$(get_command "lefthook" "$USE_PROJECT_DEPS")

# Format with Prettier
if [ -n "$PRETTIER_CMD" ]; then
  echo "‚ú® Formatting frontend files (JS/TS/CSS/Markdown)..."
  $PRETTIER_CMD --write '**/*.{js,jsx,ts,tsx,css,md,html,json,yaml,yml}' 2>/dev/null || {
    echo "‚ö†Ô∏è Prettier formatting failed, but continuing..."
  }
else
  echo "‚ö†Ô∏è Prettier not found, skipping frontend formatting..."
fi

# ESLint auto-fix
if [ -n "$ESLINT_CMD" ]; then
  echo "üßπ Running ESLint auto-fix..."
  $ESLINT_CMD --fix '**/*.{js,jsx,ts,tsx}' 2>/dev/null || {
    echo "‚ö†Ô∏è ESLint auto-fix failed, but continuing..."
  }
else
  echo "‚ö†Ô∏è ESLint not found, skipping auto-fix..."
fi

# Lefthook formatting
if [ -n "$LEFTHOOK_CMD" ]; then
  echo "üöÄ Running lefthook formatting..."
  $LEFTHOOK_CMD run fix 2>/dev/null || {
    echo "‚ö†Ô∏è Lefthook failed, but frontend formatting completed"
  }
elif [ -f "lefthook.yml" ]; then
  echo "‚ö†Ô∏è Lefthook config found but command not available, skipping..."
fi

echo "‚úÖ Formatting complete!"