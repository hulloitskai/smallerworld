/**
 * Generated by: Claude Sonnet 4
 * Last modified: 2025-01-09 10:45:00 UTC
 *
 * This code was AI-generated and may require human review and testing.
 */

import { useWindowEvent } from "@mantine/hooks";

import Neko, { type NekoProps } from "~/components/Neko";

export interface SleepyNekoProps
  extends Omit<NekoProps, "animation" | "animationSpeed"> {}

type NekoState = "idle" | "alert" | "scratch-self" | "tired" | "sleeping";

const TIREDNESS_DELAY = 10000; // 10 seconds
const SCRATCH_INTERVAL_RANGE: [number, number] = [4000, 7000]; // 4-7 seconds

/**
 * SleepyNeko component that manages behavioral states and animations
 */
const SleepyNeko: FC<SleepyNekoProps> = ({ ...otherProps }) => {
  const [state, setState] = useState<NekoState>("sleeping");

  // == Tiredness
  const tirednessTimeoutRef = useRef<NodeJS.Timeout>();
  useEffect(() => {
    return () => {
      const tirednessTimeout = tirednessTimeoutRef.current;
      if (tirednessTimeout) {
        clearTimeout(tirednessTimeout);
      }
    };
  }, []);

  // == Tiredness scheduling
  const scheduleTiredness = useCallback(() => {
    if (tirednessTimeoutRef.current) {
      return;
    }
    tirednessTimeoutRef.current = setTimeout(
      () => setState("tired"),
      TIREDNESS_DELAY,
    );
  }, []);
  const resetTiredness = useCallback(() => {
    const timeout = tirednessTimeoutRef.current;
    if (timeout) {
      clearTimeout(timeout);
    }
    tirednessTimeoutRef.current = undefined;
  }, []);

  // == State transition scheduling
  const scheduleCancellableState = useCallback(
    (state: NekoState, delay: number) => {
      const timeout = setTimeout(() => {
        setState(state);
      }, delay);
      return () => clearTimeout(timeout);
    },
    [],
  );
  useEffect(() => {
    switch (state) {
      case "idle": {
        scheduleTiredness();
        const scratchDelay = randomizedScratchingDelay();
        return scheduleCancellableState("scratch-self", scratchDelay);
      }
      case "scratch-self": {
        return scheduleCancellableState("idle", 2000);
      }
      case "alert": {
        resetTiredness();
        return scheduleCancellableState("idle", 1000);
      }
      case "tired": {
        resetTiredness();
        return scheduleCancellableState("sleeping", 1000);
      }
    }
  }, [state, scheduleCancellableState, scheduleTiredness, resetTiredness]);

  // == Alertness on click
  useWindowEvent("click", () => {
    setState("alert");
  });

  return (
    <Neko
      animation={state}
      animationSpeed={state === "sleeping" ? 0.5 : 1}
      {...otherProps}
    />
  );
};

export default SleepyNeko;

const randomizedScratchingDelay = (): number => {
  const [min, max] = SCRATCH_INTERVAL_RANGE;
  return Math.random() * (max - min) + min;
};
